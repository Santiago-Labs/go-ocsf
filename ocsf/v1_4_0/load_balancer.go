// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type LoadBalancer struct {

	// Classification: The request classification as defined by the load balancer.
	Classification *string `json:"classification,omitempty" parquet:"classification,optional"`

	// Response Code: The numeric response status code detailing the connection from the load balancer to the destination target.
	Code *int32 `json:"code,omitempty" parquet:"code,optional"`

	// Destination Endpoint: The destination to which the load balancer is distributing traffic.
	DstEndpoint *NetworkEndpoint `json:"dst_endpoint,omitempty" parquet:"dst_endpoint,optional"`

	// Endpoint Connections: An object detailing the load balancer connection attempts and responses.
	EndpointConnections []EndpointConnection `json:"endpoint_connections,omitempty" parquet:"endpoint_connections,list,optional"`

	// Error Message: The load balancer error message.
	ErrorMessage *string `json:"error_message,omitempty" parquet:"error_message,optional"`

	// IP Address: The IP address of the load balancer node that handled the client request. Note: the load balancer may have other IP addresses, and this is not an IP address of the target/distribution endpoint - see <code>dst_endpoint</code>.
	Ip *string `json:"ip,omitempty" parquet:"ip,optional"`

	// Message: The load balancer message.
	Message *string `json:"message,omitempty" parquet:"message,optional"`

	// Metrics: General purpose metrics associated with the load balancer.
	Metrics []Metric `json:"metrics,omitempty" parquet:"metrics,list,optional"`

	// Name: The name of the load balancer.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Status Detail: The status detail contains additional status information about the load balancer distribution event.
	StatusDetail *string `json:"status_detail,omitempty" parquet:"status_detail,optional"`

	// Unique ID: The unique identifier for the load balancer.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

var LoadBalancerFields = []arrow.Field{
	{Name: "classification", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "code", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "dst_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "endpoint_connections", Type: arrow.ListOf(EndpointConnectionStruct), Nullable: true},
	{Name: "error_message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "ip", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metrics", Type: arrow.ListOf(MetricStruct), Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_detail", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var LoadBalancerStruct = arrow.StructOf(LoadBalancerFields...)

var LoadBalancerSchema = arrow.NewSchema(LoadBalancerFields, nil)
var LoadBalancerClassname = "load_balancer"
