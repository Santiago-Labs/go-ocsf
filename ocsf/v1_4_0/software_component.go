// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type SoftwareComponent struct {

	// Author: The author(s) who published the software component.
	Author *string `json:"author,omitempty" parquet:"author,optional"`

	// Hash: Cryptographic hash to identify the binary instance of a software component.
	Hash *Fingerprint `json:"hash,omitempty" parquet:"hash,optional"`

	// Software License: The software license applied to this component.
	License *string `json:"license,omitempty" parquet:"license,optional"`

	// Name: The software component name.
	Name string `json:"name" parquet:"name"`

	// Package URL: The Package URL (PURL) to identify the software component. This is a URL that uniquely identifies the component, including the component's name, version, and type. The URL is used to locate and retrieve the component's metadata and content.
	Purl *string `json:"purl,omitempty" parquet:"purl,optional"`

	// Related Component: The package URL (PURL) of the component that this software component has a relationship with.
	RelatedComponent *string `json:"related_component,omitempty" parquet:"related_component,optional"`

	// Relationship: The relationship between two software components, normalized to the caption of the <code>relationship_id</code> value. In the case of 'Other', it is defined by the source.
	Relationship *string `json:"relationship,omitempty" parquet:"relationship,optional"`

	// Relationship ID: The normalized identifier of the relationship between two software components.
	RelationshipId *int32 `json:"relationship_id,omitempty" parquet:"relationship_id,optional"`

	// Type: The type of software component, normalized to the caption of the <code>type_id</code> value. In the case of 'Other', it is defined by the source.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The type of software component.
	TypeId *int32 `json:"type_id,omitempty" parquet:"type_id,optional"`

	// Version: The software component version.
	Version string `json:"version" parquet:"version"`
}

func (v *SoftwareComponent) Observable() (*int, string) {
	return nil, ""
}

var SoftwareComponentFields = []arrow.Field{
	{Name: "author", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "hash", Type: FingerprintStruct, Nullable: true},
	{Name: "license", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "purl", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "related_component", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "relationship", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "relationship_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: false},
}

var SoftwareComponentStruct = arrow.StructOf(SoftwareComponentFields...)

var SoftwareComponentSchema = arrow.NewSchema(SoftwareComponentFields, nil)
var SoftwareComponentClassname = "software_component"
