// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Compliance struct {

	// Compliance Standard References: A list of reference KB articles that provide information to help organizations understand, interpret, and implement compliance standards. They provide guidance, best practices, and examples.
	ComplianceReferences []*KBArticle `json:"compliance_references,omitempty" parquet:"compliance_references,optional,list"`

	// Compliance Standards: Details: A list of established guidelines or criteria that define specific requirements an organization must follow.
	ComplianceStandards []*KBArticle `json:"compliance_standards,omitempty" parquet:"compliance_standards,optional,list"`

	// Security Control: A Control is prescriptive, prioritized, and simplified set of best practices that one can use to strengthen their cybersecurity posture. e.g. AWS SecurityHub Controls, CIS Controls.
	Control *string `json:"control,omitempty" parquet:"control,optional"`

	// Control Parameters: The list of control parameters evaluated in a Compliance check.
	ControlParameters []*KeyValueobject `json:"control_parameters,omitempty" parquet:"control_parameters,optional,list"`

	// Compliance Requirements: A list of requirements associated to a specific control in an industry or regulatory framework. e.g. <code>NIST.800-53.r5 AU-10</code>
	Requirements []string `json:"requirements,omitempty" parquet:"requirements,optional,list"`

	// Compliance Standards: List: Compliance standards are a set of criteria organizations can follow to protect sensitive and confidential information. e.g. <code>NIST SP 800-53, CIS AWS Foundations Benchmark v1.4.0, ISO/IEC 27001</code>
	Standards []string `json:"standards" parquet:"standards,list"`

	// Status: The resultant status of the compliance check  normalized to the caption of the <code>status_id</code> value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty" parquet:"status,optional"`

	// Status Code: The resultant status code of the compliance check.
	StatusCode *string `json:"status_code,omitempty" parquet:"status_code,optional"`

	// Status Details: A list of contextual descriptions of the <code>status, status_code</code> values.
	StatusDetails []string `json:"status_details,omitempty" parquet:"status_details,optional,list"`

	// Status ID: The normalized status identifier of the compliance check.
	StatusId *int32 `json:"status_id,omitempty" parquet:"status_id,optional"`
}

var ComplianceFields = []arrow.Field{
	{Name: "compliance_references", Type: arrow.ListOf(KBArticleStruct), Nullable: true},
	{Name: "compliance_standards", Type: arrow.ListOf(KBArticleStruct), Nullable: true},
	{Name: "control", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "control_parameters", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "requirements", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "standards", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: false},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_details", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
}

var ComplianceStruct = arrow.StructOf(ComplianceFields...)

var ComplianceSchema = arrow.NewSchema(ComplianceFields, nil)
var ComplianceClassname = "compliance"
