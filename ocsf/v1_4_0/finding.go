// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Finding struct {

	// Created Time: The time when the finding was created.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,timestamp_millis,timestamp(millisecond),optional"`

	// Description: The description of the reported finding.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// First Seen: The time when the finding was first observed.
	FirstSeenTime int64 `json:"first_seen_time,omitempty" parquet:"first_seen_time,timestamp_millis,timestamp(millisecond),optional"`

	// Last Seen: The time when the finding was most recently observed.
	LastSeenTime int64 `json:"last_seen_time,omitempty" parquet:"last_seen_time,timestamp_millis,timestamp(millisecond),optional"`

	// Modified Time: The time when the finding was last modified.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,timestamp_millis,timestamp(millisecond),optional"`

	// Product: Details about the product that reported the finding.
	Product *Product `json:"product,omitempty" parquet:"product,optional"`

	// Related Events/Findings: Describes events and/or other findings related to the finding as identified by the security product. Note that these events may or may not be in OCSF.
	RelatedEvents []RelatedEventFinding `json:"related_events,omitempty" parquet:"related_events,list,optional"`

	// Remediation Guidance: Describes the recommended remediation steps to address identified issue(s).
	Remediation *Remediation `json:"remediation,omitempty" parquet:"remediation,optional"`

	// Source URL: The URL pointing to the source of the finding.
	SrcUrl *string `json:"src_url,omitempty" parquet:"src_url,optional"`

	// Supporting Data: Additional data supporting a finding as provided by security tool
	SupportingData *string `json:"supporting_data,omitempty" parquet:"supporting_data,optional"`

	// Title: A title or a brief phrase summarizing the reported finding.
	Title string `json:"title" parquet:"title"`

	// Types: One or more types of the reported finding.
	Types []string `json:"types,omitempty" parquet:"types,list,optional"`

	// Unique ID: The unique identifier of the reported finding.
	Uid string `json:"uid" parquet:"uid"`
}

var FindingFields = []arrow.Field{
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "first_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "last_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: true},
	{Name: "related_events", Type: arrow.ListOf(RelatedEventFindingStruct), Nullable: true},
	{Name: "remediation", Type: RemediationStruct, Nullable: true},
	{Name: "src_url", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "supporting_data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "title", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "types", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: false},
}

var FindingStruct = arrow.StructOf(FindingFields...)

var FindingSchema = arrow.NewSchema(FindingFields, nil)
var FindingClassname = "finding"
