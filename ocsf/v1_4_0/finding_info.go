// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type FindingInformation struct {

	// Analytic: The analytic technique used to analyze and derive insights from the data or information that led to the finding or conclusion.
	Analytic *Analytic `json:"analytic,omitempty" parquet:"analytic,optional"`

	// MITRE ATT&CK® Details: The <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a> technique and associated tactics related to the finding.
	Attacks []MITREATTCK `json:"attacks,omitempty" parquet:"attacks,list,optional"`

	// Created Time: The time when the finding was created.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,timestamp_millis,timestamp(millisecond),optional"`

	// Data Sources: A list of data sources utilized in generation of the finding.
	DataSources []string `json:"data_sources,omitempty" parquet:"data_sources,list,optional"`

	// Description: The description of the reported finding.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// First Seen: The time when the finding was first observed. e.g. The time when a vulnerability was first observed. <p>It can differ from the <code>created_time</code> timestamp, which reflects the time this finding was created.</p>
	FirstSeenTime int64 `json:"first_seen_time,omitempty" parquet:"first_seen_time,timestamp_millis,timestamp(millisecond),optional"`

	// Kill Chain: The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a> provides a detailed description of each phase and its associated activities within the broader context of a cyber attack.
	KillChain []KillChainPhase `json:"kill_chain,omitempty" parquet:"kill_chain,list,optional"`

	// Last Seen: The time when the finding was most recently observed. e.g. The time when a vulnerability was most recently observed. <p>It can differ from the <code>modified_time</code> timestamp, which reflects the time this finding was last modified.</p>
	LastSeenTime int64 `json:"last_seen_time,omitempty" parquet:"last_seen_time,timestamp_millis,timestamp(millisecond),optional"`

	// Modified Time: The time when the finding was last modified.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,timestamp_millis,timestamp(millisecond),optional"`

	// Product: Details about the product that reported the finding.
	Product *Product `json:"product,omitempty" parquet:"product,optional"`

	// Related Analytics: Other analytics related to this finding.
	RelatedAnalytics []Analytic `json:"related_analytics,omitempty" parquet:"related_analytics,list,optional"`

	// Related Events/Findings: Describes events and/or other findings related to the finding as identified by the security product. Note that these events may or may not be in OCSF.
	RelatedEvents []RelatedEventFinding `json:"related_events,omitempty" parquet:"related_events,list,optional"`

	// Related Events/Findings Count: Number of related events or findings.
	RelatedEventsCount *int32 `json:"related_events_count,omitempty" parquet:"related_events_count,optional"`

	// Source URL: The URL pointing to the source of the finding.
	SrcUrl *string `json:"src_url,omitempty" parquet:"src_url,optional"`

	// Tags: The list of tags; <code>{key:value}</code> pairs associated with the finding.
	Tags []KeyValueobject `json:"tags,omitempty" parquet:"tags,list,optional"`

	// Title: A title or a brief phrase summarizing the reported finding.
	Title *string `json:"title,omitempty" parquet:"title,optional"`

	// Types: One or more types of the reported finding.
	Types []string `json:"types,omitempty" parquet:"types,list,optional"`

	// Unique ID: The unique identifier of the reported finding.
	Uid string `json:"uid" parquet:"uid"`

	// Alternate ID: The alternative unique identifier of the reported finding.
	UidAlt *string `json:"uid_alt,omitempty" parquet:"uid_alt,optional"`
}

func (v *FindingInformation) Observable() (*int, string) {
	return nil, ""
}

var FindingInformationFields = []arrow.Field{
	{Name: "analytic", Type: AnalyticStruct, Nullable: true},
	{Name: "attacks", Type: arrow.ListOf(MITREATTCKStruct), Nullable: true},
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "data_sources", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "first_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "kill_chain", Type: arrow.ListOf(KillChainPhaseStruct), Nullable: true},
	{Name: "last_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: true},
	{Name: "related_analytics", Type: arrow.ListOf(AnalyticStruct), Nullable: true},
	{Name: "related_events", Type: arrow.ListOf(RelatedEventFindingStruct), Nullable: true},
	{Name: "related_events_count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "src_url", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "tags", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "title", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "types", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "uid_alt", Type: arrow.BinaryTypes.String, Nullable: true},
}

var FindingInformationStruct = arrow.StructOf(FindingInformationFields...)

var FindingInformationSchema = arrow.NewSchema(FindingInformationFields, nil)
var FindingInformationClassname = "finding_info"
