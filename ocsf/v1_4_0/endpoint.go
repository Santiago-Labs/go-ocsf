// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Endpoint struct {

	// Agent List: A list of <code>agent</code> objects associated with a device, endpoint, or resource.
	AgentList []Agent `json:"agent_list,omitempty" parquet:"agent_list,list,optional"`

	// Container: The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty" parquet:"container,optional"`

	// Domain: The name of the domain that the endpoint belongs to or that corresponds to the endpoint.
	Domain *string `json:"domain,omitempty" parquet:"domain,optional"`

	// Hostname: The fully qualified name of the endpoint.
	Hostname *string `json:"hostname,omitempty" parquet:"hostname,optional"`

	// Hardware Info: The endpoint hardware information.
	HwInfo *DeviceHardwareInfo `json:"hw_info,omitempty" parquet:"hw_info,optional"`

	// Instance ID: The unique identifier of a VM instance.
	InstanceUid *string `json:"instance_uid,omitempty" parquet:"instance_uid,optional"`

	// Network Interface Name: The name of the network interface (e.g. eth2).
	InterfaceName *string `json:"interface_name,omitempty" parquet:"interface_name,optional"`

	// Network Interface ID: The unique identifier of the network interface.
	InterfaceUid *string `json:"interface_uid,omitempty" parquet:"interface_uid,optional"`

	// IP Address: The IP address of the endpoint, in either IPv4 or IPv6 format.
	Ip *string `json:"ip,omitempty" parquet:"ip,optional"`

	// Geo Location: The geographical location of the endpoint.
	Location *GeoLocation `json:"location,omitempty" parquet:"location,optional"`

	// MAC Address: The Media Access Control (MAC) address of the endpoint.
	Mac *string `json:"mac,omitempty" parquet:"mac,optional"`

	// Name: The short name of the endpoint.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Namespace PID: If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int32 `json:"namespace_pid,omitempty" parquet:"namespace_pid,optional"`

	// OS: The endpoint operating system.
	Os *OperatingSystemOS `json:"os,omitempty" parquet:"os,optional"`

	// Owner: The identity of the service or user account that owns the endpoint or was last logged into it.
	Owner *User `json:"owner,omitempty" parquet:"owner,optional"`

	// Subnet UID: The unique identifier of a virtual subnet.
	SubnetUid *string `json:"subnet_uid,omitempty" parquet:"subnet_uid,optional"`

	// Type: The endpoint type. For example: <code>unknown</code>, <code>server</code>, <code>desktop</code>, <code>laptop</code>, <code>tablet</code>, <code>mobile</code>, <code>virtual</code>, <code>browser</code>, or <code>other</code>.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The endpoint type ID.
	TypeId *int32 `json:"type_id,omitempty" parquet:"type_id,optional"`

	// Unique ID: The unique identifier of the endpoint.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// VLAN: The Virtual LAN identifier.
	VlanUid *string `json:"vlan_uid,omitempty" parquet:"vlan_uid,optional"`

	// VPC UID: The unique identifier of the Virtual Private Cloud (VPC).
	VpcUid *string `json:"vpc_uid,omitempty" parquet:"vpc_uid,optional"`

	// Network Zone: The network zone or LAN segment.
	Zone *string `json:"zone,omitempty" parquet:"zone,optional"`
}

func (v *Endpoint) Observable() (*int, string) {
	typeId := 20
	return &typeId, "endpoint"
}

var EndpointFields = []arrow.Field{
	{Name: "agent_list", Type: arrow.ListOf(AgentStruct), Nullable: true},
	{Name: "container", Type: ContainerStruct, Nullable: true},
	{Name: "domain", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "hostname", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "hw_info", Type: DeviceHardwareInfoStruct, Nullable: true},
	{Name: "instance_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "interface_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "interface_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "ip", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "location", Type: GeoLocationStruct, Nullable: true},
	{Name: "mac", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "namespace_pid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "os", Type: OperatingSystemOSStruct, Nullable: true},
	{Name: "owner", Type: UserStruct, Nullable: true},
	{Name: "subnet_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vlan_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vpc_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "zone", Type: arrow.BinaryTypes.String, Nullable: true},
}

var EndpointStruct = arrow.StructOf(EndpointFields...)

var EndpointSchema = arrow.NewSchema(EndpointFields, nil)
var EndpointClassname = "endpoint"
