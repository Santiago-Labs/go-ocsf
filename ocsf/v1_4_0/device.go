// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Device struct {

	// Agent List: A list of <code>agent</code> objects associated with a device, endpoint, or resource.
	AgentList []Agent `json:"agent_list,omitempty" parquet:"agent_list,list,optional"`

	// Autoscale UID: The unique identifier of the cloud autoscale configuration.
	AutoscaleUid *string `json:"autoscale_uid,omitempty" parquet:"autoscale_uid,optional"`

	// Boot Time: The time the system was booted.
	BootTime int64 `json:"boot_time,omitempty" parquet:"boot_time,timestamp_millis,timestamp(millisecond),optional"`

	// Container: The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty" parquet:"container,optional"`

	// Created Time: The time when the device was known to have been created.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,timestamp_millis,timestamp(millisecond),optional"`

	// Description: The description of the device, ordinarily as reported by the operating system.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Domain: The network domain where the device resides. For example: <code>work.example.com</code>.
	Domain *string `json:"domain,omitempty" parquet:"domain,optional"`

	// First Seen: The initial discovery time of the device.
	FirstSeenTime int64 `json:"first_seen_time,omitempty" parquet:"first_seen_time,timestamp_millis,timestamp(millisecond),optional"`

	// Groups: The group names to which the device belongs. For example: <code>["Windows Laptops", "Engineering"]</code>.
	Groups []Group `json:"groups,omitempty" parquet:"groups,list,optional"`

	// Hostname: The device hostname.
	Hostname *string `json:"hostname,omitempty" parquet:"hostname,optional"`

	// Hardware Info: The endpoint hardware information.
	HwInfo *DeviceHardwareInfo `json:"hw_info,omitempty" parquet:"hw_info,optional"`

	// Hypervisor: The name of the hypervisor running on the device. For example, <code>Xen</code>, <code>VMware</code>, <code>Hyper-V</code>, <code>VirtualBox</code>, etc.
	Hypervisor *string `json:"hypervisor,omitempty" parquet:"hypervisor,optional"`

	// Image: The image used as a template to run the virtual machine.
	Image *Image `json:"image,omitempty" parquet:"image,optional"`

	// IMEI List: The International Mobile Equipment Identity values that are associated with the device.
	ImeiList []string `json:"imei_list,omitempty" parquet:"imei_list,list,optional"`

	// Instance ID: The unique identifier of a VM instance.
	InstanceUid *string `json:"instance_uid,omitempty" parquet:"instance_uid,optional"`

	// Network Interface Name: The name of the network interface (e.g. eth2).
	InterfaceName *string `json:"interface_name,omitempty" parquet:"interface_name,optional"`

	// Network Interface ID: The unique identifier of the network interface.
	InterfaceUid *string `json:"interface_uid,omitempty" parquet:"interface_uid,optional"`

	// IP Address: The device IP address, in either IPv4 or IPv6 format.
	Ip *string `json:"ip,omitempty" parquet:"ip,optional"`

	// Compliant Device: The event occurred on a compliant device.
	IsCompliant *bool `json:"is_compliant,omitempty" parquet:"is_compliant,optional"`

	// Managed Device: The event occurred on a managed device.
	IsManaged *bool `json:"is_managed,omitempty" parquet:"is_managed,optional"`

	// Personal Device: The event occurred on a personal device.
	IsPersonal *bool `json:"is_personal,omitempty" parquet:"is_personal,optional"`

	// Trusted Device: The event occurred on a trusted device.
	IsTrusted *bool `json:"is_trusted,omitempty" parquet:"is_trusted,optional"`

	// Last Seen: The most recent discovery time of the device.
	LastSeenTime int64 `json:"last_seen_time,omitempty" parquet:"last_seen_time,timestamp_millis,timestamp(millisecond),optional"`

	// Geo Location: The geographical location of the device.
	Location *GeoLocation `json:"location,omitempty" parquet:"location,optional"`

	// MAC Address: The Media Access Control (MAC) address of the endpoint.
	Mac *string `json:"mac,omitempty" parquet:"mac,optional"`

	// Model: The model of the device. For example <code>ThinkPad X1 Carbon</code>.
	Model *string `json:"model,omitempty" parquet:"model,optional"`

	// Modified Time: The time when the device was last known to have been modified.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,timestamp_millis,timestamp(millisecond),optional"`

	// Name: The alternate device name, ordinarily as assigned by an administrator. <p><b>Note:</b> The <b>Name</b> could be any other string that helps to identify the device, such as a phone number; for example <code>310-555-1234</code>.</p>
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Namespace PID: If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int32 `json:"namespace_pid,omitempty" parquet:"namespace_pid,optional"`

	// Network Interfaces: The network interfaces that are associated with the device, one for each unique MAC address/IP address/hostname/name combination.<p><b>Note:</b> The first element of the array is the network information that pertains to the event.</p>
	NetworkInterfaces []NetworkInterface `json:"network_interfaces,omitempty" parquet:"network_interfaces,list,optional"`

	// Organization: Organization and org unit related to the device.
	Org *Organization `json:"org,omitempty" parquet:"org,optional"`

	// OS: The endpoint operating system.
	Os *OperatingSystemOS `json:"os,omitempty" parquet:"os,optional"`

	// OS Machine UUID: The operating system assigned Machine ID. In Windows, this is the value stored at the registry path: <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid</code>. In Linux, this is stored in the file: <code>/etc/machine-id</code>.
	OsMachineUuid *string `json:"os_machine_uuid,omitempty" parquet:"os_machine_uuid,optional"`

	// Owner: The identity of the service or user account that owns the endpoint or was last logged into it.
	Owner *User `json:"owner,omitempty" parquet:"owner,optional"`

	// Region: The region where the virtual machine is located. For example, an AWS Region.
	Region *string `json:"region,omitempty" parquet:"region,optional"`

	// Risk Level: The risk level, normalized to the caption of the risk_level_id value.
	RiskLevel *string `json:"risk_level,omitempty" parquet:"risk_level,optional"`

	// Risk Level ID: The normalized risk level id.
	RiskLevelId *int32 `json:"risk_level_id,omitempty" parquet:"risk_level_id,optional"`

	// Risk Score: The risk score as reported by the event source.
	RiskScore *int32 `json:"risk_score,omitempty" parquet:"risk_score,optional"`

	// Subnet: The subnet mask.
	Subnet *string `json:"subnet,omitempty" parquet:"subnet,optional"`

	// Subnet UID: The unique identifier of a virtual subnet.
	SubnetUid *string `json:"subnet_uid,omitempty" parquet:"subnet_uid,optional"`

	// Type: The device type. For example: <code>unknown</code>, <code>server</code>, <code>desktop</code>, <code>laptop</code>, <code>tablet</code>, <code>mobile</code>, <code>virtual</code>, <code>browser</code>, or <code>other</code>.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The device type ID.
	TypeId int32 `json:"type_id" parquet:"type_id"`

	// Unique ID: The unique identifier of the device. For example the Windows TargetSID or AWS EC2 ARN.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Alternate ID: An alternate unique identifier of the device if any. For example the ActiveDirectory DN.
	UidAlt *string `json:"uid_alt,omitempty" parquet:"uid_alt,optional"`

	// Vendor Name: The vendor for the device. For example <code>Dell</code> or <code>Lenovo</code>.
	VendorName *string `json:"vendor_name,omitempty" parquet:"vendor_name,optional"`

	// VLAN: The Virtual LAN identifier.
	VlanUid *string `json:"vlan_uid,omitempty" parquet:"vlan_uid,optional"`

	// VPC UID: The unique identifier of the Virtual Private Cloud (VPC).
	VpcUid *string `json:"vpc_uid,omitempty" parquet:"vpc_uid,optional"`

	// Network Zone: The network zone or LAN segment.
	Zone *string `json:"zone,omitempty" parquet:"zone,optional"`
}

func (v *Device) Observable() (*int, string) {
	typeId := 20
	return &typeId, "device"
}

var DeviceFields = []arrow.Field{
	{Name: "agent_list", Type: arrow.ListOf(AgentStruct), Nullable: true},
	{Name: "autoscale_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "boot_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "container", Type: ContainerStruct, Nullable: true},
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "domain", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "first_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "groups", Type: arrow.ListOf(GroupStruct), Nullable: true},
	{Name: "hostname", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "hw_info", Type: DeviceHardwareInfoStruct, Nullable: true},
	{Name: "hypervisor", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "image", Type: ImageStruct, Nullable: true},
	{Name: "imei_list", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "instance_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "interface_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "interface_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "ip", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "is_compliant", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_managed", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_personal", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_trusted", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "last_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "location", Type: GeoLocationStruct, Nullable: true},
	{Name: "mac", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "model", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "namespace_pid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "network_interfaces", Type: arrow.ListOf(NetworkInterfaceStruct), Nullable: true},
	{Name: "org", Type: OrganizationStruct, Nullable: true},
	{Name: "os", Type: OperatingSystemOSStruct, Nullable: true},
	{Name: "os_machine_uuid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "owner", Type: UserStruct, Nullable: true},
	{Name: "region", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "risk_level", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "risk_level_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "risk_score", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "subnet", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "subnet_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid_alt", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vendor_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vlan_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vpc_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "zone", Type: arrow.BinaryTypes.String, Nullable: true},
}

var DeviceStruct = arrow.StructOf(DeviceFields...)

var DeviceSchema = arrow.NewSchema(DeviceFields, nil)
var DeviceClassname = "device"
