// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type File struct {

	// Accessed Time: The time when the file was last accessed.
	AccessedTime int64 `json:"accessed_time,omitempty" parquet:"accessed_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Accessor: The name of the user who last accessed the object.
	Accessor *User `json:"accessor,omitempty" parquet:"accessor,optional"`

	// Attributes: The bitmask value that represents the file attributes.
	Attributes *int32 `json:"attributes,omitempty" parquet:"attributes,optional"`

	// Company Name: The name of the company that published the file. For example: <code>Microsoft Corporation</code>.
	CompanyName *string `json:"company_name,omitempty" parquet:"company_name,optional"`

	// Confidentiality: The file content confidentiality, normalized to the confidentiality_id value. In the case of 'Other', it is defined by the event source.
	Confidentiality *string `json:"confidentiality,omitempty" parquet:"confidentiality,optional"`

	// Confidentiality ID: The normalized identifier of the file content confidentiality indicator.
	ConfidentialityId *int32 `json:"confidentiality_id,omitempty" parquet:"confidentiality_id,optional"`

	// Created Time: The time when the file was created.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Creator: The user that created the file.
	Creator *User `json:"creator,omitempty" parquet:"creator,optional"`

	// Data Classification: A list of Data Classification objects, that include information about data classification levels and data category types, indentified by a classifier.
	DataClassifications []*DataClassification `json:"data_classifications,omitempty" parquet:"data_classifications,optional,list"`

	// Description: The description of the file, as returned by file system. For example: the description as returned by the Unix file command or the Windows file type.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Drive Type: The drive type, normalized to the caption of the <code>drive_type_id</code> value. In the case of <code>Other</code>, it is defined by the source.
	DriveType *string `json:"drive_type,omitempty" parquet:"drive_type,optional"`

	// Drive Type ID: Identifies the type of a disk drive, i.e. fixed, removable, etc.
	DriveTypeId *int32 `json:"drive_type_id,omitempty" parquet:"drive_type_id,optional"`

	// Encryption Details: The encryption details of the file. Should be populated if the file is encrypted.
	EncryptionDetails *EncryptionDetails `json:"encryption_details,omitempty" parquet:"encryption_details,optional"`

	// File Extension: The extension of the file, excluding the leading dot. For example: <code>exe</code> from <code>svchost.exe</code>, or <code>gz</code> from <code>export.tar.gz</code>.
	Ext *string `json:"ext,omitempty" parquet:"ext,optional"`

	// Hashes: An array of hash attributes.
	Hashes []*Fingerprint `json:"hashes,omitempty" parquet:"hashes,optional,list"`

	// Internal Name: The name of the file as identified within the file itself. This contrasts with the name by which the file is known on disk. Where available, the internal name is widely used by security practitioners and detection content because the on-disk file name is not reliable. On the Windows OS, most PE files contain a <a href="https://learn.microsoft.com/en-us/windows/win32/menurc/versioninfo-resource">VERSIONINFO</a> resource from which the internal name can be obtained. On macOS, binaries can optionally embed a copy of the application's Info.plist file which in turn contains the name of the executable.
	InternalName *string `json:"internal_name,omitempty" parquet:"internal_name,optional"`

	// Deleted: Indicates if the file was deleted from the filesystem.
	IsDeleted *bool `json:"is_deleted,omitempty" parquet:"is_deleted,optional"`

	// Encrypted: Indicates if the file is encrypted.
	IsEncrypted *bool `json:"is_encrypted,omitempty" parquet:"is_encrypted,optional"`

	// Public: Indicates if the file is publicly accessible. For example in an object's public access in AWS S3
	IsPublic *bool `json:"is_public,omitempty" parquet:"is_public,optional"`

	// System: The indication of whether the object is part of the operating system.
	IsSystem *bool `json:"is_system,omitempty" parquet:"is_system,optional"`

	// MIME type: The Multipurpose Internet Mail Extensions (MIME) type of the file, if applicable.
	MimeType *string `json:"mime_type,omitempty" parquet:"mime_type,optional"`

	// Modified Time: The time when the file was last modified.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Modifier: The user that last modified the file.
	Modifier *User `json:"modifier,omitempty" parquet:"modifier,optional"`

	// Name: The name of the file. For example: <code>svchost.exe</code>
	Name string `json:"name" parquet:"name"`

	// Owner: The user that owns the file/object.
	Owner *User `json:"owner,omitempty" parquet:"owner,optional"`

	// Parent Folder: The parent folder in which the file resides. For example: <code>c:\windows\system32</code>
	ParentFolder *string `json:"parent_folder,omitempty" parquet:"parent_folder,optional"`

	// Path: The full path to the file. For example: <code>c:\windows\system32\svchost.exe</code>.
	Path *string `json:"path,omitempty" parquet:"path,optional"`

	// Product: The product that created or installed the file.
	Product *Product `json:"product,omitempty" parquet:"product,optional"`

	// Security Descriptor: The object security descriptor.
	SecurityDescriptor *string `json:"security_descriptor,omitempty" parquet:"security_descriptor,optional"`

	// Digital Signature: The digital signature of the file.
	Signature *DigitalSignature `json:"signature,omitempty" parquet:"signature,optional"`

	// Size: The size of data, in bytes.
	Size *int64 `json:"size,omitempty" parquet:"size,optional"`

	// Storage Class: The storage class of the file. For example in AWS S3: <code>STANDARD, STANDARD_IA, GLACIER</code>.
	StorageClass *string `json:"storage_class,omitempty" parquet:"storage_class,optional"`

	// Tags: The list of tags; <code>{key:value}</code> pairs associated to the file.
	Tags []*KeyValueobject `json:"tags,omitempty" parquet:"tags,optional,list"`

	// Type: The file type.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The file type ID.
	TypeId int32 `json:"type_id" parquet:"type_id"`

	// Unique ID: The unique identifier of the file as defined by the storage system, such the file system file ID.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// URL: The URL of the file, when applicable.
	Url *UniformResourceLocator `json:"url,omitempty" parquet:"url,optional"`

	// Version: The file version. For example: <code>8.0.7601.17514</code>.
	Version *string `json:"version,omitempty" parquet:"version,optional"`

	// Extended Attributes: An unordered collection of zero or more name/value pairs where each pair represents a file or folder extended attribute.</p>For example: Windows alternate data stream attributes (ADS stream name, ADS size, etc.), user-defined or application-defined attributes, ACL, owner, primary group, etc. Examples from DCS: </p><ul><li><strong>ads_name</strong></li><li><strong>ads_size</strong></li><li><strong>dacl</strong></li><li><strong>owner</strong></li><li><strong>primary_group</strong></li><li><strong>link_name</strong> - name of the link associated to the file.</li><li><strong>hard_link_count</strong> - the number of links that are associated to the file.</li></ul>
	Xattributes *string `json:"xattributes,omitempty" parquet:"xattributes,optional"`
}

var FileFields = []arrow.Field{
	{Name: "accessed_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "accessor", Type: UserStruct, Nullable: true},
	{Name: "attributes", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "company_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "confidentiality", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "confidentiality_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "creator", Type: UserStruct, Nullable: true},
	{Name: "data_classifications", Type: arrow.ListOf(DataClassificationStruct), Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "drive_type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "drive_type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "encryption_details", Type: EncryptionDetailsStruct, Nullable: true},
	{Name: "ext", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "hashes", Type: arrow.ListOf(FingerprintStruct), Nullable: true},
	{Name: "internal_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "is_deleted", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_encrypted", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_public", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_system", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "mime_type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "modifier", Type: UserStruct, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "owner", Type: UserStruct, Nullable: true},
	{Name: "parent_folder", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "path", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: true},
	{Name: "security_descriptor", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "signature", Type: DigitalSignatureStruct, Nullable: true},
	{Name: "size", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "storage_class", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "tags", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "url", Type: UniformResourceLocatorStruct, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "xattributes", Type: arrow.BinaryTypes.String, Nullable: true},
}

var FileStruct = arrow.StructOf(FileFields...)

var FileSchema = arrow.NewSchema(FileFields, nil)
