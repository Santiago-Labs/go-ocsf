// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Group struct {

	// Description: The group description.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Domain: The domain where the group is defined. For example: the LDAP or Active Directory domain.
	Domain *string `json:"domain,omitempty" parquet:"domain,optional"`

	// Name: The group name.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Privileges: The group privileges.
	Privileges []string `json:"privileges,omitempty" parquet:"privileges,list,optional"`

	// Account Type: The type of the group or account.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Unique ID: The unique identifier of the group. For example, for Windows events this is the security identifier (SID) of the group.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

func (v *Group) Observable() (*int, string) {
	return nil, ""
}

var GroupFields = []arrow.Field{
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "domain", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "privileges", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var GroupStruct = arrow.StructOf(GroupFields...)

var GroupSchema = arrow.NewSchema(GroupFields, nil)
var GroupClassname = "group"
