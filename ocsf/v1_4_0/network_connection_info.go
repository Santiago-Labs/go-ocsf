// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type NetworkConnectionInformation struct {

	// Boundary: The boundary of the connection, normalized to the caption of 'boundary_id'. In the case of 'Other', it is defined by the event source. <p> For cloud connections, this translates to the traffic-boundary(same VPC, through IGW, etc.). For traditional networks, this is described as Local, Internal, or External.</p>
	Boundary *string `json:"boundary,omitempty" parquet:"boundary,optional"`

	// Boundary ID: <p>The normalized identifier of the boundary of the connection. </p><p> For cloud connections, this translates to the traffic-boundary (same VPC, through IGW, etc.). For traditional networks, this is described as Local, Internal, or External.</p>
	BoundaryId *int32 `json:"boundary_id,omitempty" parquet:"boundary_id,optional"`

	// Community ID: The Community ID of the network connection.
	CommunityUid *string `json:"community_uid,omitempty" parquet:"community_uid,optional"`

	// Direction: The direction of the initiated connection, traffic, or email, normalized to the caption of the direction_id value. In the case of 'Other', it is defined by the event source.
	Direction *string `json:"direction,omitempty" parquet:"direction,optional"`

	// Direction ID: The normalized identifier of the direction of the initiated connection, traffic, or email.
	DirectionId int32 `json:"direction_id" parquet:"direction_id"`

	// Connection Flag History: The Connection Flag History summarizes events in a network connection. For example flags <code> ShAD </code> representing SYN, SYN/ACK, ACK and Data exchange.
	FlagHistory *string `json:"flag_history,omitempty" parquet:"flag_history,optional"`

	// Protocol Name: The IP protocol name in lowercase, as defined by the Internet Assigned Numbers Authority (IANA). For example: <code>tcp</code> or <code>udp</code>.
	ProtocolName *string `json:"protocol_name,omitempty" parquet:"protocol_name,optional"`

	// Protocol Number: The IP protocol number, as defined by the Internet Assigned Numbers Authority (IANA). For example: <code>6</code> for TCP and <code>17</code> for UDP.
	ProtocolNum *int32 `json:"protocol_num,omitempty" parquet:"protocol_num,optional"`

	// IP Version: The Internet Protocol version.
	ProtocolVer *string `json:"protocol_ver,omitempty" parquet:"protocol_ver,optional"`

	// IP Version ID: The Internet Protocol version identifier.
	ProtocolVerId *int32 `json:"protocol_ver_id,omitempty" parquet:"protocol_ver_id,optional"`

	// Session: The authenticated user or service session.
	Session *Session `json:"session,omitempty" parquet:"session,optional"`

	// TCP Flags: The network connection TCP header flags (i.e., control bits).
	TcpFlags *int32 `json:"tcp_flags,omitempty" parquet:"tcp_flags,optional"`

	// Connection UID: The unique identifier of the connection.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

func (v *NetworkConnectionInformation) Observable() (*int, string) {
	return nil, ""
}

var NetworkConnectionInformationFields = []arrow.Field{
	{Name: "boundary", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "boundary_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "community_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "direction", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "direction_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "flag_history", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "protocol_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "protocol_num", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "protocol_ver", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "protocol_ver_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "session", Type: SessionStruct, Nullable: true},
	{Name: "tcp_flags", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var NetworkConnectionInformationStruct = arrow.StructOf(NetworkConnectionInformationFields...)

var NetworkConnectionInformationSchema = arrow.NewSchema(NetworkConnectionInformationFields, nil)
var NetworkConnectionInformationClassname = "network_connection_info"
