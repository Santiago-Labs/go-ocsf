// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Metadata struct {

	// Correlation UID: The unique identifier used to correlate events.
	CorrelationUid *string `json:"correlation_uid,omitempty" parquet:"correlation_uid,optional"`

	// Data Classification: A list of Data Classification objects, that include information about data classification levels and data category types, indentified by a classifier.
	DataClassifications []*DataClassification `json:"data_classifications,omitempty" parquet:"data_classifications,optional,list"`

	// Debug Information: Debug information about non-fatal issues with this OCSF event. Each issue is a line in this string array.
	Debug []string `json:"debug,omitempty" parquet:"debug,optional,list"`

	// Event Code: The <code>Event ID, Code, or Name</code> that the product uses to primarily identify the event.
	EventCode *string `json:"event_code,omitempty" parquet:"event_code,optional"`

	// Schema Extensions: The schema extensions used to create the event.
	Extensions []*SchemaExtension `json:"extensions,omitempty" parquet:"extensions,optional,list"`

	// Labels: The list of labels attached to the event. For example: <code>["sample", "dev"]</code>
	Labels []string `json:"labels,omitempty" parquet:"labels,optional,list"`

	// Log Level: The audit level at which an event was generated.
	LogLevel *string `json:"log_level,omitempty" parquet:"log_level,optional"`

	// Log Name: The event log name. For example, syslog file name or Windows logging subsystem: Security.
	LogName *string `json:"log_name,omitempty" parquet:"log_name,optional"`

	// Log Provider: The logging provider or logging service that logged the event. For example, Microsoft-Windows-Security-Auditing.
	LogProvider *string `json:"log_provider,omitempty" parquet:"log_provider,optional"`

	// Log Version: The event log schema version that specifies the format of the original event. For example syslog version or Cisco Log Schema Version.
	LogVersion *string `json:"log_version,omitempty" parquet:"log_version,optional"`

	// Logged Time: <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTime int64 `json:"logged_time,omitempty" parquet:"logged_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Loggers: An array of Logger objects that describe the devices and logging products between the event source and its eventual destination. Note, this attribute can be used when there is a complex end-to-end path of event flow.
	Loggers []*Logger `json:"loggers,omitempty" parquet:"loggers,optional,list"`

	// Modified Time: The time when the event was last modified or enriched.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Original Time: The original event time as reported by the event source. For example, the time in the original format from system event log such as Syslog on Unix/Linux and the System event file on Windows. Omit if event is generated instead of collected via logs.
	OriginalTime *string `json:"original_time,omitempty" parquet:"original_time,optional"`

	// Processed Time: The event processed time, such as an ETL operation.
	ProcessedTime int64 `json:"processed_time,omitempty" parquet:"processed_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Product: The product that reported the event.
	Product Product `json:"product" parquet:"product"`

	// Profiles: The list of profiles used to create the event.  Profiles should be referenced by their <code>name</code> attribute for core profiles, or <code>extension/name</code> for profiles from extensions.
	Profiles []string `json:"profiles,omitempty" parquet:"profiles,optional,list"`

	// Sequence Number: Sequence number of the event. The sequence number is a value available in some events, to make the exact ordering of events unambiguous, regardless of the event time precision.
	Sequence *int32 `json:"sequence,omitempty" parquet:"sequence,optional"`

	// Tags: The list of tags; <code>{key:value}</code> pairs associated to the event.
	Tags []*KeyValueobject `json:"tags,omitempty" parquet:"tags,optional,list"`

	// Tenant UID: The unique tenant identifier.
	TenantUid *string `json:"tenant_uid,omitempty" parquet:"tenant_uid,optional"`

	// Event UID: The logging system-assigned unique identifier of an event instance.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Version: The version of the OCSF schema, using Semantic Versioning Specification (<a target='_blank' href='https://semver.org'>SemVer</a>). For example: 1.0.0. Event consumers use the version to determine the available event attributes.
	Version string `json:"version" parquet:"version"`
}

var MetadataFields = []arrow.Field{
	{Name: "correlation_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "data_classifications", Type: arrow.ListOf(DataClassificationStruct), Nullable: true},
	{Name: "debug", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "event_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "extensions", Type: arrow.ListOf(SchemaExtensionStruct), Nullable: true},
	{Name: "labels", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "log_level", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_provider", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_version", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "logged_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "loggers", Type: arrow.ListOf(LoggerStruct), Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "original_time", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "processed_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: false},
	{Name: "profiles", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "sequence", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "tags", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "tenant_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: false},
}

var MetadataStruct = arrow.StructOf(MetadataFields...)

var MetadataSchema = arrow.NewSchema(MetadataFields, nil)
var MetadataClassname = "metadata"
