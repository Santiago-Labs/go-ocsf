// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type GeoLocation struct {

	// Aerial Height: Expressed as either height above takeoff location or height above ground level (AGL) for a UAS current location. This value is provided in meters and must have a minimum resolution of 1 m. Special Values: <code>Invalid</code>, <code>No Value</code>, or <code>Unknown: -1000 m</code>.
	AerialHeight *string `json:"aerial_height,omitempty" parquet:"aerial_height,optional"`

	// City: The name of the city.
	City *string `json:"city,omitempty" parquet:"city,optional"`

	// Continent: The name of the continent.
	Continent *string `json:"continent,omitempty" parquet:"continent,optional"`

	// Country: The ISO 3166-1 Alpha-2 country code.<p><b>Note:</b> The two letter country code should be capitalized. For example: <code>US</code> or <code>CA</code>.</p>
	Country *string `json:"country,omitempty" parquet:"country,optional"`

	// Description: The description of the geographical location.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Geodetic Altitude: The aircraft distance above or below the ellipsoid as measured along a line that passes through the aircraft and is normal to the surface of the WGS-84 ellipsoid. This value is provided in meters and must have a minimum resolution of 1 m. Special Values: <code>Invalid</code>, <code>No Value</code>, or <code>Unknown: -1000 m</code>.
	GeodeticAltitude *string `json:"geodetic_altitude,omitempty" parquet:"geodetic_altitude,optional"`

	// Geodetic Vertical Accuracy: Provides quality/containment on geodetic altitude. This is based on ADS-B Geodetic Vertical Accuracy (GVA). Measured in meters.
	GeodeticVerticalAccuracy *string `json:"geodetic_vertical_accuracy,omitempty" parquet:"geodetic_vertical_accuracy,optional"`

	// Geohash: <p>Geohash of the geo-coordinates (latitude and longitude).</p><a target='_blank' href='https://en.wikipedia.org/wiki/Geohash'>Geohashing</a> is a geocoding system used to encode geographic coordinates in decimal degrees, to a single string.
	Geohash *string `json:"geohash,omitempty" parquet:"geohash,optional"`

	// Horizontal Accuracy: Provides quality/containment on horizontal position. This is based on ADS-B NACp. Measured in meters.
	HorizontalAccuracy *string `json:"horizontal_accuracy,omitempty" parquet:"horizontal_accuracy,optional"`

	// On Premises: The indication of whether the location is on premises.
	IsOnPremises *bool `json:"is_on_premises,omitempty" parquet:"is_on_premises,optional"`

	// ISP: The name of the Internet Service Provider (ISP).
	Isp *string `json:"isp,omitempty" parquet:"isp,optional"`

	// Latitude: The geographical Latitude coordinate represented in Decimal Degrees (DD). For example: <code>42.361145</code>.
	Lat *float64 `json:"lat,omitempty" parquet:"lat,optional"`

	// Longitude: The geographical Longitude coordinate represented in Decimal Degrees (DD). For example: <code>-71.057083</code>.
	Long *float64 `json:"long,omitempty" parquet:"long,optional"`

	// Postal Code: The postal code of the location.
	PostalCode *string `json:"postal_code,omitempty" parquet:"postal_code,optional"`

	// Pressure Altitude: The uncorrected barometric pressure altitude (based on reference standard 29.92 inHg, 1013.25 mb) provides a reference for algorithms that utilize 'altitude deltas' between aircraft. This value is provided in meters and must have a minimum resolution of 1 m.. Special Values: <code>Invalid</code>, <code>No Value</code>, or <code>Unknown: -1000 m</code>.
	PressureAltitude *string `json:"pressure_altitude,omitempty" parquet:"pressure_altitude,optional"`

	// Provider: The provider of the geographical location data.
	Provider *string `json:"provider,omitempty" parquet:"provider,optional"`

	// Region: The alphanumeric code that identifies the principal subdivision (e.g. province or state) of the country. For example, 'CH-VD' for the Canton of Vaud, Switzerland
	Region *string `json:"region,omitempty" parquet:"region,optional"`
}

var GeoLocationFields = []arrow.Field{
	{Name: "aerial_height", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "city", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "continent", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "country", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "geodetic_altitude", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "geodetic_vertical_accuracy", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "geohash", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "horizontal_accuracy", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "is_on_premises", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "isp", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "lat", Type: arrow.PrimitiveTypes.Float64, Nullable: true},
	{Name: "long", Type: arrow.PrimitiveTypes.Float64, Nullable: true},
	{Name: "postal_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "pressure_altitude", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "provider", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "region", Type: arrow.BinaryTypes.String, Nullable: true},
}

var GeoLocationStruct = arrow.StructOf(GeoLocationFields...)

var GeoLocationSchema = arrow.NewSchema(GeoLocationFields, nil)
