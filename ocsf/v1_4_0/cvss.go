// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type CVSSScore struct {

	// Base Score: The CVSS base score. For example: <code>9.1</code>.
	BaseScore float64 `json:"base_score" parquet:"base_score"`

	// CVSS Depth: The CVSS depth represents a depth of the equation used to calculate CVSS score.
	Depth *string `json:"depth,omitempty" parquet:"depth,optional"`

	// Metrics: The Common Vulnerability Scoring System metrics. This attribute contains information on the CVE's impact. If the CVE has been analyzed, this attribute will contain any CVSSv2 or CVSSv3 information associated with the vulnerability. For example: <code>{ {"Access Vector", "Network"}, {"Access Complexity", "Low"}, ...}</code>.
	Metrics []Metric `json:"metrics,omitempty" parquet:"metrics,list,optional"`

	// Overall Score: The CVSS overall score, impacted by base, temporal, and environmental metrics. For example: <code>9.1</code>.
	OverallScore *float64 `json:"overall_score,omitempty" parquet:"overall_score,optional"`

	// Severity: <p>The Common Vulnerability Scoring System (CVSS) Qualitative Severity Rating. A textual representation of the numeric score.</p><strong>CVSS v2.0</strong><ul><li>Low (0.0 – 3.9)</li><li>Medium (4.0 – 6.9)</li><li>High (7.0 – 10.0)</li></ul></p><strong>CVSS v3.0</strong><ul><li>None (0.0)</li><li>Low (0.1 - 3.9)</li><li>Medium (4.0 - 6.9)</li><li>High (7.0 - 8.9)</li><li>Critical (9.0 - 10.0)</li></ul>
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Source URL: The source URL for the CVSS score. For example: <code>https://nvd.nist.gov/vuln/detail/CVE-2021-44228</code>
	SrcUrl *string `json:"src_url,omitempty" parquet:"src_url,optional"`

	// Vector String: The CVSS vector string is a text representation of a set of CVSS metrics. It is commonly used to record or transfer CVSS metric information in a concise form. For example: <code>3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H</code>.
	VectorString *string `json:"vector_string,omitempty" parquet:"vector_string,optional"`

	// Vendor Name: The vendor that provided the CVSS score. For example: <code>NVD, REDHAT</code> etc.
	VendorName *string `json:"vendor_name,omitempty" parquet:"vendor_name,optional"`

	// Version: The CVSS version. For example: <code>3.1</code>.
	Version string `json:"version" parquet:"version"`
}

var CVSSScoreFields = []arrow.Field{
	{Name: "base_score", Type: arrow.PrimitiveTypes.Float64, Nullable: false},
	{Name: "depth", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metrics", Type: arrow.ListOf(MetricStruct), Nullable: true},
	{Name: "overall_score", Type: arrow.PrimitiveTypes.Float64, Nullable: true},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "src_url", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vector_string", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vendor_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: false},
}

var CVSSScoreStruct = arrow.StructOf(CVSSScoreFields...)

var CVSSScoreSchema = arrow.NewSchema(CVSSScoreFields, nil)
var CVSSScoreClassname = "cvss"
