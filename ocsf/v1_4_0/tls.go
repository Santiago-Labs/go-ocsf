// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type TransportLayerSecurityTLS struct {

	// Client TLS Alert: The integer value of TLS alert if present. The alerts are defined in the TLS specification in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc2246'>RFC-2246</a>.
	Alert *int32 `json:"alert,omitempty" parquet:"alert,optional"`

	// Certificate: The certificate object containing information about the digital certificate.
	Certificate *DigitalCertificate `json:"certificate,omitempty" parquet:"certificate,optional"`

	// Certificate Chain: The Chain of Certificate Serial Numbers field provides a chain of Certificate Issuer Serial Numbers leading to the Root Certificate Issuer.
	CertificateChain []string `json:"certificate_chain,omitempty" parquet:"certificate_chain,optional,list"`

	// Cipher Suite: The negotiated cipher suite.
	Cipher *string `json:"cipher,omitempty" parquet:"cipher,optional"`

	// Client Cipher Suites: The client cipher suites that were exchanged during the TLS handshake negotiation.
	ClientCiphers []string `json:"client_ciphers,omitempty" parquet:"client_ciphers,optional,list"`

	// Handshake Duration: The amount of total time for the TLS handshake to complete after the TCP connection is established, including client-side delays, in milliseconds.
	HandshakeDur *int32 `json:"handshake_dur,omitempty" parquet:"handshake_dur,optional"`

	// JA3 Hash: The MD5 hash of a JA3 string.
	Ja3Hash *Fingerprint `json:"ja3_hash,omitempty" parquet:"ja3_hash,optional"`

	// JA3S Hash: The MD5 hash of a JA3S string.
	Ja3sHash *Fingerprint `json:"ja3s_hash,omitempty" parquet:"ja3s_hash,optional"`

	// Key Length: The length of the encryption key.
	KeyLength *int32 `json:"key_length,omitempty" parquet:"key_length,optional"`

	// Server Cipher Suites: The server cipher suites that were exchanged during the TLS handshake negotiation.
	ServerCiphers []string `json:"server_ciphers,omitempty" parquet:"server_ciphers,optional,list"`

	// Server Name Indication:  The Server Name Indication (SNI) extension sent by the client.
	Sni *string `json:"sni,omitempty" parquet:"sni,optional"`

	// TLS Extension List: The list of TLS extensions.
	TlsExtensionList []*TLSExtension `json:"tls_extension_list,omitempty" parquet:"tls_extension_list,optional,list"`

	// Version: The TLS protocol version.
	Version string `json:"version" parquet:"version"`
}

var TransportLayerSecurityTLSFields = []arrow.Field{
	{Name: "alert", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "certificate", Type: DigitalCertificateStruct, Nullable: true},
	{Name: "certificate_chain", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "cipher", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "client_ciphers", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "handshake_dur", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "ja3_hash", Type: FingerprintStruct, Nullable: true},
	{Name: "ja3s_hash", Type: FingerprintStruct, Nullable: true},
	{Name: "key_length", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "server_ciphers", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "sni", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "tls_extension_list", Type: arrow.ListOf(TLSExtensionStruct), Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: false},
}

var TransportLayerSecurityTLSStruct = arrow.StructOf(TransportLayerSecurityTLSFields...)

var TransportLayerSecurityTLSSchema = arrow.NewSchema(TransportLayerSecurityTLSFields, nil)
