// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Container struct {

	// Hash: Commit hash of image created for docker or the SHA256 hash of the container. For example: <code>13550340a8681c84c861aac2e5b440161c2b33a3e4f302ac680ca5b686de48de</code>.
	Hash *Fingerprint `json:"hash,omitempty" parquet:"hash,optional"`

	// Image: The container image used as a template to run the container.
	Image *Image `json:"image,omitempty" parquet:"image,optional"`

	// Labels: The list of labels associated to the container.
	Labels []string `json:"labels,omitempty" parquet:"labels,list,optional"`

	// Name: The container name.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Network Driver: The network driver used by the container. For example, bridge, overlay, host, none, etc.
	NetworkDriver *string `json:"network_driver,omitempty" parquet:"network_driver,optional"`

	// Orchestrator: The orchestrator managing the container, such as ECS, EKS, K8s, or OpenShift.
	Orchestrator *string `json:"orchestrator,omitempty" parquet:"orchestrator,optional"`

	// Pod UUID: The unique identifier of the pod (or equivalent) that the container is executing on.
	PodUuid *string `json:"pod_uuid,omitempty" parquet:"pod_uuid,optional"`

	// Runtime: The backend running the container, such as containerd or cri-o.
	Runtime *string `json:"runtime,omitempty" parquet:"runtime,optional"`

	// Size: The size of the container image.
	Size *int64 `json:"size,omitempty" parquet:"size,optional"`

	// Tags: The list of tags; <code>{key:value}</code> pairs associated to the container.
	Tags []KeyValueobject `json:"tags,omitempty" parquet:"tags,list,optional"`

	// Unique ID: The full container unique identifier for this instantiation of the container. For example: <code>ac2ea168264a08f9aaca0dfc82ff3551418dfd22d02b713142a6843caa2f61bf</code>.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

var ContainerFields = []arrow.Field{
	{Name: "hash", Type: FingerprintStruct, Nullable: true},
	{Name: "image", Type: ImageStruct, Nullable: true},
	{Name: "labels", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "network_driver", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "orchestrator", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "pod_uuid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "runtime", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "size", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "tags", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var ContainerStruct = arrow.StructOf(ContainerFields...)

var ContainerSchema = arrow.NewSchema(ContainerFields, nil)
var ContainerClassname = "container"
