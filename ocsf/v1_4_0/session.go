// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Session struct {

	// Count: The number of identical sessions spawned from the same source IP, destination IP, application, and content/threat type seen over a period of time.
	Count *int32 `json:"count,omitempty" parquet:"count,optional"`

	// Created Time: The time when the session was created.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,timestamp_millis,timestamp(millisecond),optional"`

	// User Credential ID: The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty" parquet:"credential_uid,optional"`

	// Expiration Reason: The reason which triggered the session expiration.
	ExpirationReason *string `json:"expiration_reason,omitempty" parquet:"expiration_reason,optional"`

	// Expiration Time: The session expiration time.
	ExpirationTime int64 `json:"expiration_time,omitempty" parquet:"expiration_time,timestamp_millis,timestamp(millisecond),optional"`

	// Multi Factor Authentication: Indicates whether Multi Factor Authentication was used during authentication.
	IsMfa *bool `json:"is_mfa,omitempty" parquet:"is_mfa,optional"`

	// Remote: The indication of whether the session is remote.
	IsRemote *bool `json:"is_remote,omitempty" parquet:"is_remote,optional"`

	// VPN Session: The indication of whether the session is a VPN session.
	IsVpn *bool `json:"is_vpn,omitempty" parquet:"is_vpn,optional"`

	// Issuer Details: The identifier of the session issuer.
	Issuer *string `json:"issuer,omitempty" parquet:"issuer,optional"`

	// Terminal: The Pseudo Terminal associated with the session. Ex: the tty or pts value.
	Terminal *string `json:"terminal,omitempty" parquet:"terminal,optional"`

	// Unique ID: The unique identifier of the session.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Alternate ID: The alternate unique identifier of the session. e.g. AWS ARN - <code>arn:aws:sts::123344444444:assumed-role/Admin/example-session</code>.
	UidAlt *string `json:"uid_alt,omitempty" parquet:"uid_alt,optional"`

	// UUID: The universally unique identifier of the session.
	Uuid *string `json:"uuid,omitempty" parquet:"uuid,optional"`
}

func (v *Session) Observable() (*int, string) {
	return nil, ""
}

var SessionFields = []arrow.Field{
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "credential_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "expiration_reason", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "expiration_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "is_mfa", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_remote", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_vpn", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "issuer", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "terminal", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid_alt", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uuid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var SessionStruct = arrow.StructOf(SessionFields...)

var SessionSchema = arrow.NewSchema(SessionFields, nil)
var SessionClassname = "session"
