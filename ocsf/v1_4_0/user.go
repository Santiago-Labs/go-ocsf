// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type User struct {

	// Account: The user's account or the account associated with the user.
	Account *Account `json:"account,omitempty" parquet:"account,optional"`

	// User Credential ID: The unique identifier of the user's credential. For example, AWS Access Key ID.
	CredentialUid *string `json:"credential_uid,omitempty" parquet:"credential_uid,optional"`

	// Domain: The domain where the user is defined. For example: the LDAP or Active Directory domain.
	Domain *string `json:"domain,omitempty" parquet:"domain,optional"`

	// Email Address: The user's primary email address.
	EmailAddr *string `json:"email_addr,omitempty" parquet:"email_addr,optional"`

	// Forwarding Address: The user's forwarding email address.
	ForwardAddr *string `json:"forward_addr,omitempty" parquet:"forward_addr,optional"`

	// Full Name: The full name of the person, as per the LDAP Common Name attribute (cn).
	FullName *string `json:"full_name,omitempty" parquet:"full_name,optional"`

	// Groups: The administrative groups to which the user belongs.
	Groups []*Group `json:"groups,omitempty" parquet:"groups,optional,list"`

	// MFA Assigned: The user has a multi-factor or secondary-factor device assigned.
	HasMfa *bool `json:"has_mfa,omitempty" parquet:"has_mfa,optional"`

	// LDAP Person: The additional LDAP attributes that describe a person.
	LdapPerson *LDAPPersonRef `json:"ldap_person,omitempty" parquet:"ldap_person,optional"`

	// Name: The username. For example, <code>janedoe1</code>.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Organization: Organization and org unit related to the user.
	Org *Organization `json:"org,omitempty" parquet:"org,optional"`

	// Telephone Number: The telephone number of the user.
	PhoneNumber *string `json:"phone_number,omitempty" parquet:"phone_number,optional"`

	// Risk Level: The risk level, normalized to the caption of the risk_level_id value.
	RiskLevel *string `json:"risk_level,omitempty" parquet:"risk_level,optional"`

	// Risk Level ID: The normalized risk level id.
	RiskLevelId *int32 `json:"risk_level_id,omitempty" parquet:"risk_level_id,optional"`

	// Risk Score: The risk score as reported by the event source.
	RiskScore *int32 `json:"risk_score,omitempty" parquet:"risk_score,optional"`

	// Type: The type of the user. For example, System, AWS IAM User, etc.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The account type identifier.
	TypeId *int32 `json:"type_id,omitempty" parquet:"type_id,optional"`

	// Unique ID: The unique user identifier. For example, the Windows user SID, ActiveDirectory DN or AWS user ARN.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Alternate ID: The alternate user identifier. For example, the Active Directory user GUID or AWS user Principal ID.
	UidAlt *string `json:"uid_alt,omitempty" parquet:"uid_alt,optional"`
}

var UserFields = []arrow.Field{
	{Name: "account", Type: AccountStruct, Nullable: true},
	{Name: "credential_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "domain", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "email_addr", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "forward_addr", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "full_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "groups", Type: arrow.ListOf(GroupStruct), Nullable: true},
	{Name: "has_mfa", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "ldap_person", Type: LDAPPersonRefStruct, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "org", Type: OrganizationStruct, Nullable: true},
	{Name: "phone_number", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "risk_level", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "risk_level_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "risk_score", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid_alt", Type: arrow.BinaryTypes.String, Nullable: true},
}

var UserStruct = arrow.StructOf(UserFields...)

var UserSchema = arrow.NewSchema(UserFields, nil)
