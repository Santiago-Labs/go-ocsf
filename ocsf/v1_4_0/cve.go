// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type CVE struct {

	// Created Time: The Record Creation Date identifies when the CVE ID was issued to a CVE Numbering Authority (CNA) or the CVE Record was published on the CVE List. Note that the Record Creation Date does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in CVE.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,optional,timestamp_millis,timestamp(millisecond)"`

	// CVSS Score: The CVSS object details Common Vulnerability Scoring System (<a target='_blank' href='https://www.first.org/cvss/'>CVSS</a>) scores from the advisory that are related to the vulnerability.
	Cvss []*CVSSScore `json:"cvss,omitempty" parquet:"cvss,optional,list"`

	// Description: A brief description of the CVE Record.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// EPSS: The Exploit Prediction Scoring System (EPSS) object describes the estimated probability a vulnerability will be exploited. EPSS is a community-driven effort to combine descriptive information about vulnerabilities (CVEs) with evidence of actual exploitation in-the-wild. (<a target='_blank' href='https://www.first.org/epss/'>EPSS</a>).
	Epss *EPSS `json:"epss,omitempty" parquet:"epss,optional"`

	// Modified Time: The Record Modified Date identifies when the CVE record was last updated.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Product: The product where the vulnerability was discovered.
	Product *Product `json:"product,omitempty" parquet:"product,optional"`

	// References: A list of reference URLs with additional information about the CVE Record.
	References []string `json:"references,omitempty" parquet:"references,optional,list"`

	// Related CWEs: Describes the Common Weakness Enumeration <a target='_blank' href='https://cwe.mitre.org/'>(CWE)</a> details related to the CVE Record.
	RelatedCwes []*CWE `json:"related_cwes,omitempty" parquet:"related_cwes,optional,list"`

	// Title: A title or a brief phrase summarizing the CVE record.
	Title *string `json:"title,omitempty" parquet:"title,optional"`

	// Vulnerability Type: <p>The vulnerability type as selected from a large dropdown menu during CVE refinement.</p>Most frequently used vulnerability types are: <code>DoS</code>, <code>Code Execution</code>, <code>Overflow</code>, <code>Memory Corruption</code>, <code>Sql Injection</code>, <code>XSS</code>, <code>Directory Traversal</code>, <code>Http Response Splitting</code>, <code>Bypass something</code>, <code>Gain Information</code>, <code>Gain Privileges</code>, <code>CSRF</code>, <code>File Inclusion</code>. For more information see <a target='_blank' href='https://www.cvedetails.com/vulnerabilities-by-types.php'>Vulnerabilities By Type</a> distributions.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// CVE ID: The Common Vulnerabilities and Exposures unique number assigned to a specific computer vulnerability. A CVE Identifier begins with 4 digits representing the year followed by a sequence of digits that acts as a unique identifier. For example: <code>CVE-2021-12345</code>.
	Uid string `json:"uid" parquet:"uid"`
}

var CVEFields = []arrow.Field{
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "cvss", Type: arrow.ListOf(CVSSScoreStruct), Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "epss", Type: EPSSStruct, Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: true},
	{Name: "references", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "related_cwes", Type: arrow.ListOf(CWEStruct), Nullable: true},
	{Name: "title", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: false},
}

var CVEStruct = arrow.StructOf(CVEFields...)

var CVESchema = arrow.NewSchema(CVEFields, nil)
