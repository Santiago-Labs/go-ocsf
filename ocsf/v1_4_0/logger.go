// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Logger struct {

	// Device: The device where the events are logged.
	Device *Device `json:"device,omitempty" parquet:"device,optional"`

	// Event UID: The unique identifier of the event assigned by the logger.
	EventUid *string `json:"event_uid,omitempty" parquet:"event_uid,optional"`

	// Log Level: The audit level at which an event was generated.
	LogLevel *string `json:"log_level,omitempty" parquet:"log_level,optional"`

	// Log Name: The event log name. For example, syslog file name or Windows logging subsystem: Security.
	LogName *string `json:"log_name,omitempty" parquet:"log_name,optional"`

	// Log Provider: The logging provider or logging service that logged the event. For example, Microsoft-Windows-Security-Auditing.
	LogProvider *string `json:"log_provider,omitempty" parquet:"log_provider,optional"`

	// Log Version: The event log schema version that specifies the format of the original event. For example syslog version or Cisco Log Schema Version.
	LogVersion *string `json:"log_version,omitempty" parquet:"log_version,optional"`

	// Logged Time: <p>The time when the logging system collected and logged the event.</p>This attribute is distinct from the event time in that event time typically contain the time extracted from the original event. Most of the time, these two times will be different.
	LoggedTime int64 `json:"logged_time,omitempty" parquet:"logged_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Name: The name of the logging product instance.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Product: The product logging the event.  This may be the event source product, a management server product, a scanning product, a SIEM, etc.
	Product *Product `json:"product,omitempty" parquet:"product,optional"`

	// Transmission Time: The time when the event was transmitted from the logging device to it's next destination.
	TransmitTime int64 `json:"transmit_time,omitempty" parquet:"transmit_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Unique ID: The unique identifier of the logging product instance.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Version: The version of the logging product.
	Version *string `json:"version,omitempty" parquet:"version,optional"`
}

var LoggerFields = []arrow.Field{
	{Name: "device", Type: DeviceStruct, Nullable: true},
	{Name: "event_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_level", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_provider", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "log_version", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "logged_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: true},
	{Name: "transmit_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: true},
}

var LoggerStruct = arrow.StructOf(LoggerFields...)

var LoggerSchema = arrow.NewSchema(LoggerFields, nil)
