// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type RelatedEventFinding struct {

	// MITRE ATT&CK® Details: An array of <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a> objects describing identified tactics, techniques & sub-techniques.
	Attacks []*MITREATTCK `json:"attacks,omitempty" parquet:"attacks,optional,list"`

	// Count: The number of times that activity in the same logical group occurred, as reported by the related Finding.
	Count *int32 `json:"count,omitempty" parquet:"count,optional"`

	// Created Time: The time when the related event/finding was created.
	CreatedTime int64 `json:"created_time,omitempty" parquet:"created_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Description: A description of the related event/finding.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// First Seen: The time when the finding was first observed. e.g. The time when a vulnerability was first observed.<br>It can differ from the <code>created_time</code> timestamp, which reflects the time this finding was created.
	FirstSeenTime int64 `json:"first_seen_time,omitempty" parquet:"first_seen_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Kill Chain: The <a target='_blank' href='https://www.lockheedmartin.com/en-us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a> provides a detailed description of each phase and its associated activities within the broader context of a cyber attack.
	KillChain []*KillChainPhase `json:"kill_chain,omitempty" parquet:"kill_chain,optional,list"`

	// Last Seen: The time when the finding was most recently observed. e.g. The time when a vulnerability was most recently observed.<br>It can differ from the <code>modified_time</code> timestamp, which reflects the time this finding was last modified.
	LastSeenTime int64 `json:"last_seen_time,omitempty" parquet:"last_seen_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Modified Time: The time when the related event/finding was last modified.
	ModifiedTime int64 `json:"modified_time,omitempty" parquet:"modified_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Observables: The observables associated with the event or a finding.
	Observables []*Observable `json:"observables,omitempty" parquet:"observables,optional,list"`

	// Product: Details about the product that reported the related event/finding.
	Product *Product `json:"product,omitempty" parquet:"product,optional"`

	// Severity: The event/finding severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the source.
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Severity ID: <p>The normalized identifier of the event/finding severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId *int32 `json:"severity_id,omitempty" parquet:"severity_id,optional"`

	// Tags: The list of tags; <code>{key:value}</code> pairs associated with the related event/finding.
	Tags []*KeyValueobject `json:"tags,omitempty" parquet:"tags,optional,list"`

	// Title: A title or a brief phrase summarizing the related event/finding.
	Title *string `json:"title,omitempty" parquet:"title,optional"`

	// Type: The type of the related event/finding.</p>Populate if the related event/finding is <code>NOT</code> in OCSF. If it is in OCSF, then utilize <code>type_name, type_uid</code> instead.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type Name: The type of the related OCSF event, as defined by <code>type_uid</code>.<p>For example: <code>Process Activity: Launch.</code></p>Populate if the related event/finding is in OCSF.
	TypeName *string `json:"type_name,omitempty" parquet:"type_name,optional"`

	// Type ID: The unique identifier of the related OCSF event type. <p>For example: <code>100701.</code></p>Populate if the related event/finding is in OCSF.
	TypeUid *int64 `json:"type_uid,omitempty" parquet:"type_uid,optional"`

	// Unique ID: The unique identifier of the related event/finding.</p> If the related event/finding is in OCSF, then this value must be equal to <code>metadata.uid</code> in the corresponding event.
	Uid string `json:"uid" parquet:"uid"`
}

var RelatedEventFindingFields = []arrow.Field{
	{Name: "attacks", Type: arrow.ListOf(MITREATTCKStruct), Nullable: true},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "created_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "first_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "kill_chain", Type: arrow.ListOf(KillChainPhaseStruct), Nullable: true},
	{Name: "last_seen_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "modified_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "observables", Type: arrow.ListOf(ObservableStruct), Nullable: true},
	{Name: "product", Type: ProductStruct, Nullable: true},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "tags", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "title", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: false},
}

var RelatedEventFindingStruct = arrow.StructOf(RelatedEventFindingFields...)

var RelatedEventFindingSchema = arrow.NewSchema(RelatedEventFindingFields, nil)
var RelatedEventFindingClassname = "related_event"
