// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type IdentityProvider struct {

	// Authentication Factors: The Authentication Factors object describes the different types of Multi-Factor Authentication (MFA) methods and/or devices supported by the Identity Provider.
	AuthFactors []*AuthenticationFactor `json:"auth_factors,omitempty" parquet:"auth_factors,optional,list"`

	// Domain: The primary domain associated with the Identity Provider.
	Domain *string `json:"domain,omitempty" parquet:"domain,optional"`

	// Certificate Fingerprint: The fingerprint of the X.509 certificate used by the Identity Provider.
	Fingerprint *Fingerprint `json:"fingerprint,omitempty" parquet:"fingerprint,optional"`

	// MFA Enforced: The Identity Provider enforces Multi Factor Authentication (MFA).
	HasMfa *bool `json:"has_mfa,omitempty" parquet:"has_mfa,optional"`

	// Issuer Details: The unique identifier (often a URL) used by the Identity Provider as its issuer.
	Issuer *string `json:"issuer,omitempty" parquet:"issuer,optional"`

	// Name: The name of the Identity Provider.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Supported Protocol: The supported protocol of the Identity Provider. E.g., <code>SAML</code>, <code>OIDC</code>, or <code>OAuth2</code>.
	ProtocolName *string `json:"protocol_name,omitempty" parquet:"protocol_name,optional"`

	// SCIM: The System for Cross-domain Identity Management (SCIM) resource object provides a structured set of attributes related to SCIM protocols used for identity provisioning and management across cloud-based platforms. It standardizes user and group provisioning details, enabling identity synchronization and lifecycle management with compatible Identity Providers (IdPs) and applications. SCIM is defined in <a target='_blank' href='https://datatracker.ietf.org/doc/html/rfc7643'>RFC-7634</a>
	Scim *SCIM `json:"scim,omitempty" parquet:"scim,optional"`

	// SSO: The Single Sign-On (SSO) object provides a structure for normalizing SSO attributes, configuration, and/or settings from Identity Providers.
	Sso *SSO `json:"sso,omitempty" parquet:"sso,optional"`

	// State: The configuration state of the Identity Provider, normalized to the caption of the <code>state_id</code> value. In the case of <code>Other</code>, it is defined by the event source.
	State *string `json:"state,omitempty" parquet:"state,optional"`

	// State ID: The normalized state ID of the Identity Provider to reflect its configuration or activation status.
	StateId *int32 `json:"state_id,omitempty" parquet:"state_id,optional"`

	// Tenant UID: The tenant ID associated with the Identity Provider.
	TenantUid *string `json:"tenant_uid,omitempty" parquet:"tenant_uid,optional"`

	// Unique ID: The unique identifier of the Identity Provider.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Configuration URL: The URL for accessing the configuration or metadata of the Identity Provider.
	UrlString *string `json:"url_string,omitempty" parquet:"url_string,optional"`
}

var IdentityProviderFields = []arrow.Field{
	{Name: "auth_factors", Type: arrow.ListOf(AuthenticationFactorStruct), Nullable: true},
	{Name: "domain", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "fingerprint", Type: FingerprintStruct, Nullable: true},
	{Name: "has_mfa", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "issuer", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "protocol_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "scim", Type: SCIMStruct, Nullable: true},
	{Name: "sso", Type: SSOStruct, Nullable: true},
	{Name: "state", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "state_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "tenant_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "url_string", Type: arrow.BinaryTypes.String, Nullable: true},
}

var IdentityProviderStruct = arrow.StructOf(IdentityProviderFields...)

var IdentityProviderSchema = arrow.NewSchema(IdentityProviderFields, nil)
