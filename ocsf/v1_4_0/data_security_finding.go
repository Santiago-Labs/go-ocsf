// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type DataSecurityFinding struct {

	// Account ID: The account ID of the event. Used for partitioning.
	AccountId string `json:"account_id" parquet:"account_id"`

	// Activity ID: The normalized identifier of the Data Security Finding activity.
	ActivityId int32 `json:"activity_id" parquet:"activity_id"`

	// Activity: The Data Security finding activity name, as defined by the <code>activity_id</code>.
	ActivityName *string `json:"activity_name,omitempty" parquet:"activity_name,optional"`

	// Category: The event category name, as defined by category_uid value: <code>Findings</code>.
	CategoryName *string `json:"category_name,omitempty" parquet:"category_name,optional"`

	// Category ID: The category unique identifier of the event.
	CategoryUid int32 `json:"category_uid" parquet:"category_uid"`

	// Class: The event class name, as defined by class_uid value: <code>Data Security Finding</code>.
	ClassName *string `json:"class_name,omitempty" parquet:"class_name,optional"`

	// Class ID: The unique identifier of a class. A class describes the attributes available in an event.
	ClassUid int32 `json:"class_uid" parquet:"class_uid"`

	// Cloud: Describes details about the Cloud environment where the event was originally created or logged.
	Cloud Cloud `json:"cloud" parquet:"cloud"`

	// Comment: A user provided comment about the finding.
	Comment *string `json:"comment,omitempty" parquet:"comment,optional"`

	// Count: The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int32 `json:"count,omitempty" parquet:"count,optional"`

	// Data Security: The Data Security object describes the characteristics, techniques and content of a Data Loss Prevention (DLP), Data Loss Detection (DLD), Data Classification, or similar tools' finding, alert, or detection mechanism(s).
	DataSecurity *DataSecurity `json:"data_security,omitempty" parquet:"data_security,optional"`

	// Database: Describes the database where classified or sensitive data is stored in, or was accessed from. Databases are typically datastore services that contain an organized collection of structured and/or semi-structured data.
	Database *Database `json:"database,omitempty" parquet:"database,optional"`

	// Databucket: Describes the databucket where classified or sensitive data is stored in, or was accessed from. The data bucket object is a basic container that holds data, typically organized through the use of data partitions.
	Databucket *Databucket `json:"databucket,omitempty" parquet:"databucket,optional"`

	// Destination Endpoint: Describes the endpoint where classified or sensitive data is stored in, or was accessed from.
	DstEndpoint *NetworkEndpoint `json:"dst_endpoint,omitempty" parquet:"dst_endpoint,optional"`

	// Duration Milliseconds: The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int64 `json:"duration,omitempty" parquet:"duration,optional"`

	// End Time: The time of the most recent event included in the finding.
	EndTime int64 `json:"end_time,omitempty" parquet:"end_time,timestamp_millis,timestamp(millisecond),optional"`

	// Enrichments: The additional information from an external data source, which is associated with the event or a finding. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []Enrichment `json:"enrichments,omitempty" parquet:"enrichments,list,optional"`

	// File: Describes a file that contains classified or sensitive data.
	File *File `json:"file,omitempty" parquet:"file,optional"`

	// Finding Information: Describes the supporting information about a generated finding.
	FindingInfo FindingInformation `json:"finding_info" parquet:"finding_info"`

	// Message: The description of the event/finding, as defined by the source.
	Message *string `json:"message,omitempty" parquet:"message,optional"`

	// Metadata: The metadata associated with the event or a finding.
	Metadata Metadata `json:"metadata" parquet:"metadata"`

	// Observables: The observables associated with the event or a finding.
	Observables []Observable `json:"observables,omitempty" parquet:"observables,list,optional"`

	// OSINT: The OSINT (Open Source Intelligence) object contains details related to an indicator such as the indicator itself, related indicators, geolocation, registrar information, subdomains, analyst commentary, and other contextual information. This information can be used to further enrich a detection or finding by providing decisioning support to other analysts and engineers.
	Osint []OSINT `json:"osint" parquet:"osint,list"`

	// Raw Data: The raw event/finding data as received from the source.
	RawData *string `json:"raw_data,omitempty" parquet:"raw_data,optional"`

	// Region: The region of the event. Used for partitioning.
	Region string `json:"region" parquet:"region"`

	// Additional Resources: Describes details about additional resources, where classified or sensitive data is stored in, or was accessed from. <p> You can populate this object, if the specific resource type objects available in the class (<code>database, databucket, table, file</code>) aren't sufficient; OR <br> You can also choose to duplicate <code>uid, name</code> of the specific resources objects, for a consistent access to resource uids across all findings.
	Resources []ResourceDetails `json:"resources,omitempty" parquet:"resources,list,optional"`

	// Severity: The event/finding severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the source.
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Severity ID: <p>The normalized identifier of the event/finding severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId int32 `json:"severity_id" parquet:"severity_id"`

	// Source Endpoint: Details about the source endpoint where classified or sensitive data was accessed from.
	SrcEndpoint *NetworkEndpoint `json:"src_endpoint,omitempty" parquet:"src_endpoint,optional"`

	// Start Time: The time of the least recent event included in the finding.
	StartTime int64 `json:"start_time,omitempty" parquet:"start_time,timestamp_millis,timestamp(millisecond),optional"`

	// Status: The normalized status of the Finding set by the consumer normalized to the caption of the status_id value. In the case of 'Other', it is defined by the source.
	Status *string `json:"status,omitempty" parquet:"status,optional"`

	// Status Code: The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty" parquet:"status_code,optional"`

	// Status Detail: The status detail contains additional information about the event/finding outcome.
	StatusDetail *string `json:"status_detail,omitempty" parquet:"status_detail,optional"`

	// Status ID: The normalized status identifier of the Finding, set by the consumer.
	StatusId *int32 `json:"status_id,omitempty" parquet:"status_id,optional"`

	// Table: Describes the table where classified or sensitive data is stored in, or was accessed from. The table object represents a table within a structured relational database, warehouse, lake, or similar.
	Table *Table `json:"table,omitempty" parquet:"table,optional"`

	// Event Time: The normalized event occurrence time or the finding creation time.
	Time int64 `json:"time" parquet:"time,timestamp_millis,timestamp(millisecond)"`

	// Timezone Offset: The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int32 `json:"timezone_offset,omitempty" parquet:"timezone_offset,optional"`

	// Type Name: The event/finding type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty" parquet:"type_name,optional"`

	// Type ID: The event/finding type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid int64 `json:"type_uid" parquet:"type_uid"`

	// Unmapped Data: The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *string `json:"unmapped,omitempty" parquet:"unmapped,optional"`

	// Vendor Attributes: The Vendor Attributes object can be used to represent values of attributes populated by the Vendor/Finding Provider. It can help distinguish between the vendor-prodvided values and consumer-updated values, of key attributes like <code>severity_id</code>.<br>The original finding producer should not populate this object. It should be populated by consuming systems that support data mutability.
	VendorAttributes *VendorAttributes `json:"vendor_attributes,omitempty" parquet:"vendor_attributes,optional"`
}

var DataSecurityFindingFields = []arrow.Field{
	{Name: "account_id", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "activity_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "class_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "cloud", Type: CloudStruct, Nullable: false},
	{Name: "comment", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "data_security", Type: DataSecurityStruct, Nullable: true},
	{Name: "database", Type: DatabaseStruct, Nullable: true},
	{Name: "databucket", Type: DatabucketStruct, Nullable: true},
	{Name: "dst_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "end_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "enrichments", Type: arrow.ListOf(EnrichmentStruct), Nullable: true},
	{Name: "file", Type: FileStruct, Nullable: true},
	{Name: "finding_info", Type: FindingInformationStruct, Nullable: false},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metadata", Type: MetadataStruct, Nullable: false},
	{Name: "observables", Type: arrow.ListOf(ObservableStruct), Nullable: true},
	{Name: "osint", Type: arrow.ListOf(OSINTStruct), Nullable: false},
	{Name: "raw_data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "region", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "resources", Type: arrow.ListOf(ResourceDetailsStruct), Nullable: true},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "src_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "start_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_detail", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "table", Type: TableStruct, Nullable: true},
	{Name: "time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: false},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "unmapped", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vendor_attributes", Type: VendorAttributesStruct, Nullable: true},
}

var DataSecurityFindingStruct = arrow.StructOf(DataSecurityFindingFields...)

var DataSecurityFindingSchema = arrow.NewSchema(DataSecurityFindingFields, nil)
var DataSecurityFindingClassname = "data_security_finding"
