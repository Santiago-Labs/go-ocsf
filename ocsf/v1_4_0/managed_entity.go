// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type ManagedEntity struct {

	// Data: The managed entity content as a JSON object.
	Data *string `json:"data,omitempty" parquet:"data,optional"`

	// Device: An addressable device, computer system or host.
	Device *Device `json:"device,omitempty" parquet:"device,optional"`

	// Email: The email object.
	Email *Email `json:"email,omitempty" parquet:"email,optional"`

	// Group: The group object associated with an entity such as user, policy, or rule.
	Group *Group `json:"group,omitempty" parquet:"group,optional"`

	// Geo Location: The detailed geographical location usually associated with an IP address.
	Location *GeoLocation `json:"location,omitempty" parquet:"location,optional"`

	// Name: The name of the managed entity.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Organization: Organization and org unit relevant to the event or object.
	Org *Organization `json:"org,omitempty" parquet:"org,optional"`

	// Policy: Describes details of a managed policy.
	Policy *Policy `json:"policy,omitempty" parquet:"policy,optional"`

	// Type: The managed entity type. For example: <code>policy</code>, <code>user</code>, <code>organizational unit</code>, <code>device</code>.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The type of the Managed Entity. It is recommended to also populate the <code>type</code> attribute with the associated label, or the source specific name if <code>Other</code>.
	TypeId *int32 `json:"type_id,omitempty" parquet:"type_id,optional"`

	// Unique ID: The identifier of the managed entity.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// User: The user that pertains to the event or object.
	User *User `json:"user,omitempty" parquet:"user,optional"`

	// Version: The version of the managed entity. For example: <code>1.2.3</code>.
	Version *string `json:"version,omitempty" parquet:"version,optional"`
}

var ManagedEntityFields = []arrow.Field{
	{Name: "data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "device", Type: DeviceStruct, Nullable: true},
	{Name: "email", Type: EmailStruct, Nullable: true},
	{Name: "group", Type: GroupStruct, Nullable: true},
	{Name: "location", Type: GeoLocationStruct, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "org", Type: OrganizationStruct, Nullable: true},
	{Name: "policy", Type: PolicyStruct, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "user", Type: UserStruct, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: true},
}

var ManagedEntityStruct = arrow.StructOf(ManagedEntityFields...)

var ManagedEntitySchema = arrow.NewSchema(ManagedEntityFields, nil)
var ManagedEntityClassname = "managed_entity"
