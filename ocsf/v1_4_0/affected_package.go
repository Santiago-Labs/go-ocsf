// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type AffectedSoftwarePackage struct {

	// Architecture: Architecture is a shorthand name describing the type of computer hardware the packaged software is meant to run on.
	Architecture *string `json:"architecture,omitempty" parquet:"architecture,optional"`

	// The product CPE identifier: The Common Platform Enumeration (CPE) name as described by (<a target='_blank' href='https://nvd.nist.gov/products/cpe'>NIST</a>) For example: <code>cpe:/a:apple:safari:16.2</code>.
	CpeName *string `json:"cpe_name,omitempty" parquet:"cpe_name,optional"`

	// Epoch: The software package epoch. Epoch is a way to define weighted dependencies based on version numbers.
	Epoch *int32 `json:"epoch,omitempty" parquet:"epoch,optional"`

	// Fixed In Version: The software package version in which a reported vulnerability was patched/fixed.
	FixedInVersion *string `json:"fixed_in_version,omitempty" parquet:"fixed_in_version,optional"`

	// Hash: Cryptographic hash to identify the binary instance of a software component. This can include any component such file, package, or library.
	Hash *Fingerprint `json:"hash,omitempty" parquet:"hash,optional"`

	// Software License: The software license applied to this package.
	License *string `json:"license,omitempty" parquet:"license,optional"`

	// Name: The software package name.
	Name string `json:"name" parquet:"name"`

	// Package Manager: The software packager manager utilized to manage a package on a system, e.g. npm, yum, dpkg etc.
	PackageManager *string `json:"package_manager,omitempty" parquet:"package_manager,optional"`

	// Path: The installation path of the affected package.
	Path *string `json:"path,omitempty" parquet:"path,optional"`

	// Package URL: A purl is a URL string used to identify and locate a software package in a mostly universal and uniform way across programming languages, package managers, packaging conventions, tools, APIs and databases.
	Purl *string `json:"purl,omitempty" parquet:"purl,optional"`

	// Software Release Details: Release is the number of times a version of the software has been packaged.
	Release *string `json:"release,omitempty" parquet:"release,optional"`

	// Remediation Guidance: Describes the recommended remediation steps to address identified issue(s).
	Remediation *Remediation `json:"remediation,omitempty" parquet:"remediation,optional"`

	// Type: The type of software package, normalized to the caption of the type_id value. In the case of 'Other', it is defined by the source.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The type of software package.
	TypeId *int32 `json:"type_id,omitempty" parquet:"type_id,optional"`

	// Vendor Name: The name of the vendor who published the software package.
	VendorName *string `json:"vendor_name,omitempty" parquet:"vendor_name,optional"`

	// Version: The software package version.
	Version string `json:"version" parquet:"version"`
}

var AffectedSoftwarePackageFields = []arrow.Field{
	{Name: "architecture", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "cpe_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "epoch", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "fixed_in_version", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "hash", Type: FingerprintStruct, Nullable: true},
	{Name: "license", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "package_manager", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "path", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "purl", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "release", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "remediation", Type: RemediationStruct, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "vendor_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: false},
}

var AffectedSoftwarePackageStruct = arrow.StructOf(AffectedSoftwarePackageFields...)

var AffectedSoftwarePackageSchema = arrow.NewSchema(AffectedSoftwarePackageFields, nil)
var AffectedSoftwarePackageClassname = "affected_package"
