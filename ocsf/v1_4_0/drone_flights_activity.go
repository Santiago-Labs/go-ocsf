// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type DroneFlightsActivity struct {

	// Account ID: The account ID of the event. Used for partitioning.
	AccountId string `json:"account_id" parquet:"account_id"`

	// Activity ID: The normalized identifier of the activity that triggered the event.
	ActivityId int32 `json:"activity_id" parquet:"activity_id"`

	// Activity: The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty" parquet:"activity_name,optional"`

	// Authentication Type: The authentication type as defined by the caption of <code>auth_protocol_id</code>. In the case of 'Other', it is defined by the event source.
	AuthProtocol *string `json:"auth_protocol,omitempty" parquet:"auth_protocol,optional"`

	// Authentication Type ID: The normalized identifier of the authentication type used to authorize a flight plan or mission.
	AuthProtocolId *int32 `json:"auth_protocol_id,omitempty" parquet:"auth_protocol_id,optional"`

	// Category: The event category name, as defined by category_uid value: <code>Unmanned Systems</code>.
	CategoryName *string `json:"category_name,omitempty" parquet:"category_name,optional"`

	// Category ID: The category unique identifier of the event.
	CategoryUid int32 `json:"category_uid" parquet:"category_uid"`

	// Class: The event class name, as defined by class_uid value: <code>Drone Flights Activity</code>.
	ClassName *string `json:"class_name,omitempty" parquet:"class_name,optional"`

	// Class ID: The unique identifier of a class. A class describes the attributes available in an event.
	ClassUid int32 `json:"class_uid" parquet:"class_uid"`

	// Classification Type: UA Classification - Allows a region to classify UAS in a regional specific manner. The format may differ from region to region.
	Classification *string `json:"classification,omitempty" parquet:"classification,optional"`

	// Cloud: Describes details about the Cloud environment where the event was originally created or logged.
	Cloud Cloud `json:"cloud" parquet:"cloud"`

	// Operation Description: This optional, free-text field enables the operator to describe the purpose of a flight, if so desired.
	Comment *string `json:"comment,omitempty" parquet:"comment,optional"`

	// Connection Info: The network connection information.
	ConnectionInfo *NetworkConnectionInformation `json:"connection_info,omitempty" parquet:"connection_info,optional"`

	// Count: The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int32 `json:"count,omitempty" parquet:"count,optional"`

	// Destination Endpoint: The destination network endpoint of the Unmanned Aerial System (UAS), Counter Unmanned Aerial System (CUAS) platform, or other unmanned systems monitoring and/or sensing infrastructure.
	DstEndpoint NetworkEndpoint `json:"dst_endpoint" parquet:"dst_endpoint"`

	// Duration Milliseconds: The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int64 `json:"duration,omitempty" parquet:"duration,optional"`

	// End Time: The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime int64 `json:"end_time,omitempty" parquet:"end_time,timestamp_millis,timestamp(millisecond),optional"`

	// Enrichments: The additional information from an external data source, which is associated with the event or a finding. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []Enrichment `json:"enrichments,omitempty" parquet:"enrichments,list,optional"`

	// Message: The description of the event/finding, as defined by the source.
	Message *string `json:"message,omitempty" parquet:"message,optional"`

	// Metadata: The metadata associated with the event or a finding.
	Metadata Metadata `json:"metadata" parquet:"metadata"`

	// Observables: The observables associated with the event or a finding.
	Observables []Observable `json:"observables,omitempty" parquet:"observables,list,optional"`

	// OSINT: The OSINT (Open Source Intelligence) object contains details related to an indicator such as the indicator itself, related indicators, geolocation, registrar information, subdomains, analyst commentary, and other contextual information. This information can be used to further enrich a detection or finding by providing decisioning support to other analysts and engineers.
	Osint []OSINT `json:"osint" parquet:"osint,list"`

	// Remote ID Protocol: The networking protocol associated with the Remote ID device or beacon. E.g. <code>BLE</code>, <code>LTE</code>, <code>802.11</code>.
	ProtocolName *string `json:"protocol_name,omitempty" parquet:"protocol_name,optional"`

	// Proxy Endpoint: The proxy (server) in a network connection.
	ProxyEndpoint *NetworkProxyEndpoint `json:"proxy_endpoint,omitempty" parquet:"proxy_endpoint,optional"`

	// Raw Data: The raw event/finding data as received from the source.
	RawData *string `json:"raw_data,omitempty" parquet:"raw_data,optional"`

	// Region: The region of the event. Used for partitioning.
	Region string `json:"region" parquet:"region"`

	// Severity: The event/finding severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the source.
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Severity ID: <p>The normalized identifier of the event/finding severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId int32 `json:"severity_id" parquet:"severity_id"`

	// Source Endpoint: The source network endpoint of the Unmanned Aerial System (UAS), Counter Unmanned Aerial System (CUAS) platform, or other unmanned systems monitoring and/or sensing infrastructure.
	SrcEndpoint *NetworkEndpoint `json:"src_endpoint,omitempty" parquet:"src_endpoint,optional"`

	// Start Time: The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime int64 `json:"start_time,omitempty" parquet:"start_time,timestamp_millis,timestamp(millisecond),optional"`

	// Operational Status: The normalized Operational status for the Unmanned Aerial System (UAS) normalized to the caption of the <code>status_id</code> value. In the case of 'Other', it is defined by the source.
	Status *string `json:"status,omitempty" parquet:"status,optional"`

	// Status Code: The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty" parquet:"status_code,optional"`

	// Status Detail: The status detail contains additional information about the event/finding outcome.
	StatusDetail *string `json:"status_detail,omitempty" parquet:"status_detail,optional"`

	// Operational Status ID: The normalized Operational status identifier for the Unmanned Aerial System (UAS).
	StatusId *int32 `json:"status_id,omitempty" parquet:"status_id,optional"`

	// Event Time: The normalized event occurrence time or the finding creation time.
	Time int64 `json:"time" parquet:"time,timestamp_millis,timestamp(millisecond)"`

	// Timezone Offset: The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int32 `json:"timezone_offset,omitempty" parquet:"timezone_offset,optional"`

	// TLS: The Transport Layer Security (TLS) attributes.
	Tls *TransportLayerSecurityTLS `json:"tls,omitempty" parquet:"tls,optional"`

	// Traffic: Traffic refers to the amount of data transmitted from a Unmanned Aerial System (UAS) or Counter Unmanned Aerial System (UAS) (CUAS) system at a given point of time. Ex: <code>bytes_in</code> and <code>bytes_out</code>.
	Traffic *NetworkTraffic `json:"traffic,omitempty" parquet:"traffic,optional"`

	// Type Name: The event/finding type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty" parquet:"type_name,optional"`

	// Type ID: The event/finding type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid int64 `json:"type_uid" parquet:"type_uid"`

	// Unmanned Aerial System: The Unmanned Aerial System object describes the characteristics, Position Location Information (PLI), and other metadata of Unmanned Aerial Systems (UAS) and other unmanned and drone systems used in Remote ID. Remote ID is defined in the Standard Specification for Remote ID and Tracking (ASTM Designation: F3411-22a) <a target='_blank' href='https://cdn.standards.iteh.ai/samples/112830/71297057ac42432880a203654f213709/ASTM-F3411-22a.pdf'>ASTM F3411-22a</a>.
	UnmannedAerialSystem UnmannedAerialSystem `json:"unmanned_aerial_system" parquet:"unmanned_aerial_system"`

	// UAS Operating Area: The UAS Operating Area object describes details about a precise area of operations for a UAS flight or mission.
	UnmannedSystemOperatingArea *UnmannedSystemOperatingArea `json:"unmanned_system_operating_area,omitempty" parquet:"unmanned_system_operating_area,optional"`

	// Unmanned Systems Operator: The human or machine operator of an Unmanned System.
	UnmannedSystemOperator User `json:"unmanned_system_operator" parquet:"unmanned_system_operator"`

	// Unmapped Data: The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *string `json:"unmapped,omitempty" parquet:"unmapped,optional"`
}

var DroneFlightsActivityFields = []arrow.Field{
	{Name: "account_id", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "activity_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "auth_protocol", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "auth_protocol_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "category_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "class_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "classification", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "cloud", Type: CloudStruct, Nullable: false},
	{Name: "comment", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "connection_info", Type: NetworkConnectionInformationStruct, Nullable: true},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "dst_endpoint", Type: NetworkEndpointStruct, Nullable: false},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "end_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "enrichments", Type: arrow.ListOf(EnrichmentStruct), Nullable: true},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metadata", Type: MetadataStruct, Nullable: false},
	{Name: "observables", Type: arrow.ListOf(ObservableStruct), Nullable: true},
	{Name: "osint", Type: arrow.ListOf(OSINTStruct), Nullable: false},
	{Name: "protocol_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "proxy_endpoint", Type: NetworkProxyEndpointStruct, Nullable: true},
	{Name: "raw_data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "region", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "src_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "start_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_detail", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: false},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "tls", Type: TransportLayerSecurityTLSStruct, Nullable: true},
	{Name: "traffic", Type: NetworkTrafficStruct, Nullable: true},
	{Name: "type_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "unmanned_aerial_system", Type: UnmannedAerialSystemStruct, Nullable: false},
	{Name: "unmanned_system_operating_area", Type: UnmannedSystemOperatingAreaStruct, Nullable: true},
	{Name: "unmanned_system_operator", Type: UserStruct, Nullable: false},
	{Name: "unmapped", Type: arrow.BinaryTypes.String, Nullable: true},
}

var DroneFlightsActivityStruct = arrow.StructOf(DroneFlightsActivityFields...)

var DroneFlightsActivitySchema = arrow.NewSchema(DroneFlightsActivityFields, nil)
var DroneFlightsActivityClassname = "drone_flights_activity"
