// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type HTTPRequest struct {

	// HTTP Arguments: The arguments sent along with the HTTP request.
	Args *string `json:"args,omitempty" parquet:"args,optional"`

	// Request Body Length: The actual length of the HTTP request body, in number of bytes, independent of a potentially existing Content-Length header.
	BodyLength *int32 `json:"body_length,omitempty" parquet:"body_length,optional"`

	// HTTP Headers: Additional HTTP headers of an HTTP request or response.
	HttpHeaders []*HTTPHeader `json:"http_headers,omitempty" parquet:"http_headers,optional,list"`

	// HTTP Method: The <a target='_blank' href='https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods'>HTTP request method</a> indicates the desired action to be performed for a given resource.
	HttpMethod *string `json:"http_method,omitempty" parquet:"http_method,optional"`

	// Request Length: The length of the entire HTTP request, in number of bytes.
	Length *int32 `json:"length,omitempty" parquet:"length,optional"`

	// HTTP Referrer: The request header that identifies the address of the previous web page, which is linked to the current web page or resource being requested.
	Referrer *string `json:"referrer,omitempty" parquet:"referrer,optional"`

	// Unique ID: The unique identifier of the http request.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// URL: The URL object that pertains to the request.
	Url *UniformResourceLocator `json:"url,omitempty" parquet:"url,optional"`

	// HTTP User-Agent: The request header that identifies the operating system and web browser.
	UserAgent *string `json:"user_agent,omitempty" parquet:"user_agent,optional"`

	// HTTP Version: The Hypertext Transfer Protocol (HTTP) version.
	Version *string `json:"version,omitempty" parquet:"version,optional"`

	// X-Forwarded-For: The X-Forwarded-For header identifying the originating IP address(es) of a client connecting to a web server through an HTTP proxy or a load balancer.
	XForwardedFor []string `json:"x_forwarded_for,omitempty" parquet:"x_forwarded_for,optional,list"`
}

var HTTPRequestFields = []arrow.Field{
	{Name: "args", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "body_length", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "http_headers", Type: arrow.ListOf(HTTPHeaderStruct), Nullable: true},
	{Name: "http_method", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "length", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "referrer", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "url", Type: UniformResourceLocatorStruct, Nullable: true},
	{Name: "user_agent", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "x_forwarded_for", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
}

var HTTPRequestStruct = arrow.StructOf(HTTPRequestFields...)

var HTTPRequestSchema = arrow.NewSchema(HTTPRequestFields, nil)
var HTTPRequestClassname = "http_request"
