// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_4_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type NTPActivity struct {

	// Account ID: The account ID of the event. Used for partitioning.
	AccountId string `json:"account_id" parquet:"account_id"`

	// Activity ID: The normalized identifier of the activity that triggered the event.
	ActivityId int32 `json:"activity_id" parquet:"activity_id"`

	// Activity: The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty" parquet:"activity_name,optional"`

	// Application Name: The name of the application associated with the event or object.
	AppName *string `json:"app_name,omitempty" parquet:"app_name,optional"`

	// Category: The event category name, as defined by category_uid value: <code>Network Activity</code>.
	CategoryName *string `json:"category_name,omitempty" parquet:"category_name,optional"`

	// Category ID: The category unique identifier of the event.
	CategoryUid int32 `json:"category_uid" parquet:"category_uid"`

	// Class: The event class name, as defined by class_uid value: <code>NTP Activity</code>.
	ClassName *string `json:"class_name,omitempty" parquet:"class_name,optional"`

	// Class ID: The unique identifier of a class. A class describes the attributes available in an event.
	ClassUid int32 `json:"class_uid" parquet:"class_uid"`

	// Cloud: Describes details about the Cloud environment where the event was originally created or logged.
	Cloud Cloud `json:"cloud" parquet:"cloud"`

	// Connection Info: The network connection information.
	ConnectionInfo *NetworkConnectionInformation `json:"connection_info,omitempty" parquet:"connection_info,optional"`

	// Count: The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int32 `json:"count,omitempty" parquet:"count,optional"`

	// Root Delay: The total round-trip delay to the reference clock in milliseconds.
	Delay *int32 `json:"delay,omitempty" parquet:"delay,optional"`

	// Root Dispersion: The dispersion in the NTP protocol is the estimated time error or uncertainty relative to the reference clock in milliseconds.
	Dispersion *int32 `json:"dispersion,omitempty" parquet:"dispersion,optional"`

	// Destination Endpoint: The responder (server) in a network connection.
	DstEndpoint *NetworkEndpoint `json:"dst_endpoint,omitempty" parquet:"dst_endpoint,optional"`

	// Duration Milliseconds: The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int64 `json:"duration,omitempty" parquet:"duration,optional"`

	// End Time: The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime int64 `json:"end_time,omitempty" parquet:"end_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Enrichments: The additional information from an external data source, which is associated with the event or a finding. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []*Enrichment `json:"enrichments,omitempty" parquet:"enrichments,optional,list"`

	// JA4+ Fingerprints: A list of the JA4+ network fingerprints.
	Ja4FingerprintList []*JA4Fingerprint `json:"ja4_fingerprint_list,omitempty" parquet:"ja4_fingerprint_list,optional,list"`

	// Message: The description of the event/finding, as defined by the source.
	Message *string `json:"message,omitempty" parquet:"message,optional"`

	// Metadata: The metadata associated with the event or a finding.
	Metadata Metadata `json:"metadata" parquet:"metadata"`

	// Observables: The observables associated with the event or a finding.
	Observables []*Observable `json:"observables,omitempty" parquet:"observables,optional,list"`

	// OSINT: The OSINT (Open Source Intelligence) object contains details related to an indicator such as the indicator itself, related indicators, geolocation, registrar information, subdomains, analyst commentary, and other contextual information. This information can be used to further enrich a detection or finding by providing decisioning support to other analysts and engineers.
	Osint []OSINT `json:"osint" parquet:"osint,list"`

	// Precision: The NTP precision quantifies a clock's accuracy and stability in log2 seconds, as defined in RFC-5905.
	Precision *int32 `json:"precision,omitempty" parquet:"precision,optional"`

	// Raw Data: The raw event/finding data as received from the source.
	RawData *string `json:"raw_data,omitempty" parquet:"raw_data,optional"`

	// Region: The region of the event. Used for partitioning.
	Region string `json:"region" parquet:"region"`

	// Severity: The event/finding severity, normalized to the caption of the severity_id value. In the case of 'Other', it is defined by the source.
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Severity ID: <p>The normalized identifier of the event/finding severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId int32 `json:"severity_id" parquet:"severity_id"`

	// Source Endpoint: The initiator (client) of the network connection.
	SrcEndpoint *NetworkEndpoint `json:"src_endpoint,omitempty" parquet:"src_endpoint,optional"`

	// Start Time: The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime int64 `json:"start_time,omitempty" parquet:"start_time,optional,timestamp_millis,timestamp(millisecond)"`

	// Status: The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty" parquet:"status,optional"`

	// Status Code: The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty" parquet:"status_code,optional"`

	// Status Detail: The status detail contains additional information about the event/finding outcome.
	StatusDetail *string `json:"status_detail,omitempty" parquet:"status_detail,optional"`

	// Status ID: The normalized identifier of the event status.
	StatusId *int32 `json:"status_id,omitempty" parquet:"status_id,optional"`

	// Stratum: The stratum level of the NTP server's time source, normalized to the caption of the stratum_id value.
	Stratum *string `json:"stratum,omitempty" parquet:"stratum,optional"`

	// Stratum ID: The normalized identifier of the stratum level, as defined in <a target='_blank' href='https://www.rfc-editor.org/rfc/rfc5905.html'>RFC-5905</a>.
	StratumId *int32 `json:"stratum_id,omitempty" parquet:"stratum_id,optional"`

	// Event Time: The normalized event occurrence time or the finding creation time.
	Time int64 `json:"time" parquet:"time,timestamp_millis,timestamp(millisecond)"`

	// Timezone Offset: The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int32 `json:"timezone_offset,omitempty" parquet:"timezone_offset,optional"`

	// TLS: The Transport Layer Security (TLS) attributes.
	Tls *TransportLayerSecurityTLS `json:"tls,omitempty" parquet:"tls,optional"`

	// Traffic: The network traffic refers to the amount of data moving across a network at a given point of time. Intended to be used alongside Network Connection.
	Traffic *NetworkTraffic `json:"traffic,omitempty" parquet:"traffic,optional"`

	// Type Name: The event/finding type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty" parquet:"type_name,optional"`

	// Type ID: The event/finding type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid int64 `json:"type_uid" parquet:"type_uid"`

	// Unmapped Data: The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *string `json:"unmapped,omitempty" parquet:"unmapped,optional"`

	// Version: The version number of the NTP protocol.
	Version string `json:"version" parquet:"version"`
}

var NTPActivityFields = []arrow.Field{
	{Name: "account_id", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "activity_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "app_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "class_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "cloud", Type: CloudStruct, Nullable: false},
	{Name: "connection_info", Type: NetworkConnectionInformationStruct, Nullable: true},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "delay", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "dispersion", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "dst_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "end_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "enrichments", Type: arrow.ListOf(EnrichmentStruct), Nullable: true},
	{Name: "ja4_fingerprint_list", Type: arrow.ListOf(JA4FingerprintStruct), Nullable: true},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metadata", Type: MetadataStruct, Nullable: false},
	{Name: "observables", Type: arrow.ListOf(ObservableStruct), Nullable: true},
	{Name: "osint", Type: arrow.ListOf(OSINTStruct), Nullable: false},
	{Name: "precision", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "raw_data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "region", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "src_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "start_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_detail", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "stratum", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "stratum_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: false},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "tls", Type: TransportLayerSecurityTLSStruct, Nullable: true},
	{Name: "traffic", Type: NetworkTrafficStruct, Nullable: true},
	{Name: "type_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "unmapped", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: false},
}

var NTPActivityStruct = arrow.StructOf(NTPActivityFields...)

var NTPActivitySchema = arrow.NewSchema(NTPActivityFields, nil)
