package ocsf

import (
	"time"

	"github.com/apache/arrow/go/v15/arrow"
	"github.com/apache/arrow/go/v15/arrow/array"
)

// VulnerabilityFindingFields defines the Arrow fields for VulnerabilityFinding.
var VulnerabilityFindingFields = []arrow.Field{
	{Name: "time", Type: arrow.BinaryTypes.String},
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int16},
	{Name: "activity_name", Type: arrow.BinaryTypes.String},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32},
	{Name: "category_name", Type: arrow.BinaryTypes.String},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32},
	{Name: "class_name", Type: arrow.BinaryTypes.String},
	{Name: "comment", Type: arrow.BinaryTypes.String},
	{Name: "confidence", Type: arrow.BinaryTypes.String},
	{Name: "confidence_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "confidence_score", Type: arrow.PrimitiveTypes.Int32},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int32},
	{Name: "end_time", Type: arrow.BinaryTypes.String},
	{Name: "enrichments", Type: arrow.ListOf(arrow.StructOf(EnrichmentFields...))},
	{Name: "finding_info", Type: arrow.StructOf(FindingInfoFields...)},
	{Name: "message", Type: arrow.BinaryTypes.String},
	{Name: "metadata", Type: arrow.StructOf(MetadataFields...)},
	{Name: "resource", Type: arrow.StructOf(ResourceDetailsFields...)},
	{Name: "severity", Type: arrow.BinaryTypes.String},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "observables", Type: arrow.ListOf(arrow.StructOf(ObservableFields...))},
	{Name: "raw_data", Type: arrow.BinaryTypes.String},
	{Name: "start_time", Type: arrow.BinaryTypes.String},
	{Name: "status", Type: arrow.BinaryTypes.String},
	{Name: "status_code", Type: arrow.BinaryTypes.String},
	{Name: "status_detail", Type: arrow.BinaryTypes.String},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64},
	{Name: "type_name", Type: arrow.BinaryTypes.String},
	{Name: "unmapped", Type: arrow.BinaryTypes.String},
	{Name: "vulnerabilities", Type: arrow.ListOf(arrow.StructOf(VulnerabilityDetailsFields...))},
}

// VulnerabilityFindingSchema is the Arrow schema for VulnerabilityFinding.
var VulnerabilityFindingSchema = arrow.NewSchema(VulnerabilityFindingFields, nil)

// Note: we changed Resource to Resources to match the schema.
type VulnerabilityFinding struct {
	Time            time.Time              `json:"time"`
	ActivityID      int16                  `json:"activity_id"`
	ActivityName    *string                `json:"activity_name"`
	CategoryUID     int32                  `json:"category_uid"`
	CategoryName    *string                `json:"category_name"`
	ClassUID        int32                  `json:"class_uid"`
	ClassName       *string                `json:"class_name"`
	Comment         *string                `json:"comment"`
	Confidence      *string                `json:"confidence"`
	ConfidenceID    *int32                 `json:"confidence_id"`
	ConfidenceScore *int32                 `json:"confidence_score"`
	Count           *int32                 `json:"count"`
	Duration        *int32                 `json:"duration"`
	EndTime         *time.Time             `json:"end_time"`
	Enrichments     []Enrichment           `json:"enrichments,omitempty"`
	FindingInfo     FindingInfo            `json:"finding_info"`
	Message         *string                `json:"message"`
	Metadata        Metadata               `json:"metadata"`
	Resource        *ResourceDetails       `json:"resource,omitempty"`
	Severity        *string                `json:"severity"`
	SeverityID      int32                  `json:"severity_id"`
	Observables     []Observable           `json:"observables,omitempty"`
	RawData         *string                `json:"raw_data"`
	StartTime       *time.Time             `json:"start_time"`
	Status          *string                `json:"status"`
	StatusCode      *string                `json:"status_code"`
	StatusDetail    *string                `json:"status_detail"`
	StatusID        *int32                 `json:"status_id"`
	TimezoneOffset  *int32                 `json:"timezone_offset"`
	TypeUID         int64                  `json:"type_uid"`
	TypeName        *string                `json:"type_name"`
	Unmapped        string                 `json:"unmapped"`
	Vulnerabilities []VulnerabilityDetails `json:"vulnerabilities"`
}

// WriteToParquet accepts an Arrow RecordBuilder and writes the VulnerabilityFinding record to it.
func (vf *VulnerabilityFinding) WriteToParquet(rb *array.RecordBuilder) {
	// Field 0: time.
	rb.Field(0).(*array.StringBuilder).Append(vf.Time.Format(time.RFC3339))

	// Field 1: activity_id.
	rb.Field(1).(*array.Int16Builder).Append(vf.ActivityID)

	// Field 2: activity_name.
	if vf.ActivityName != nil {
		rb.Field(2).(*array.StringBuilder).Append(*vf.ActivityName)
	} else {
		rb.Field(2).(*array.StringBuilder).AppendNull()
	}

	// Field 3: category_uid.
	rb.Field(3).(*array.Int32Builder).Append(vf.CategoryUID)

	// Field 4: category_name.
	if vf.CategoryName != nil {
		rb.Field(4).(*array.StringBuilder).Append(*vf.CategoryName)
	} else {
		rb.Field(4).(*array.StringBuilder).AppendNull()
	}

	// Field 5: class_uid.
	rb.Field(5).(*array.Int32Builder).Append(vf.ClassUID)

	// Field 6: class_name.
	if vf.ClassName != nil {
		rb.Field(6).(*array.StringBuilder).Append(*vf.ClassName)
	} else {
		rb.Field(6).(*array.StringBuilder).AppendNull()
	}

	// Field 7: comment.
	if vf.Comment != nil {
		rb.Field(7).(*array.StringBuilder).Append(*vf.Comment)
	} else {
		rb.Field(7).(*array.StringBuilder).AppendNull()
	}

	// Field 8: confidence.
	if vf.Confidence != nil {
		rb.Field(8).(*array.StringBuilder).Append(*vf.Confidence)
	} else {
		rb.Field(8).(*array.StringBuilder).AppendNull()
	}

	// Field 9: confidence_id.
	if vf.ConfidenceID != nil {
		rb.Field(9).(*array.Int32Builder).Append(*vf.ConfidenceID)
	} else {
		rb.Field(9).(*array.Int32Builder).AppendNull()
	}

	// Field 10: confidence_score.
	if vf.ConfidenceScore != nil {
		rb.Field(10).(*array.Int32Builder).Append(*vf.ConfidenceScore)
	} else {
		rb.Field(10).(*array.Int32Builder).AppendNull()
	}

	// Field 11: count.
	if vf.Count != nil {
		rb.Field(11).(*array.Int32Builder).Append(*vf.Count)
	} else {
		rb.Field(11).(*array.Int32Builder).AppendNull()
	}

	// Field 12: duration.
	if vf.Duration != nil {
		rb.Field(12).(*array.Int32Builder).Append(*vf.Duration)
	} else {
		rb.Field(12).(*array.Int32Builder).AppendNull()
	}

	// Field 13: end_time.
	if vf.EndTime != nil {
		rb.Field(13).(*array.StringBuilder).Append(vf.EndTime.Format(time.RFC3339))
	} else {
		rb.Field(13).(*array.StringBuilder).AppendNull()
	}

	// Field 14: enrichments (list of Enrichment).
	enrichmentsB := rb.Field(14).(*array.ListBuilder)
	if len(vf.Enrichments) > 0 {
		enrichmentsB.Append(true)
		enrichmentsValB := enrichmentsB.ValueBuilder().(*array.StructBuilder)
		for _, e := range vf.Enrichments {
			enrichmentsValB.Append(true)
			e.WriteToParquet(enrichmentsValB)
		}
	} else {
		enrichmentsB.AppendNull()
	}

	// Field 15: finding_info (struct).
	findingInfoB := rb.Field(15).(*array.StructBuilder)
	findingInfoB.Append(true)
	vf.FindingInfo.WriteToParquet(findingInfoB)

	// Field 16: message.
	if vf.Message != nil {
		rb.Field(16).(*array.StringBuilder).Append(*vf.Message)
	} else {
		rb.Field(16).(*array.StringBuilder).AppendNull()
	}

	// Field 17: metadata (struct).
	metadataB := rb.Field(17).(*array.StructBuilder)
	metadataB.Append(true)
	vf.Metadata.WriteToParquet(metadataB)

	// Field 18: resources (list of ResourceDetails).
	resourceB := rb.Field(18).(*array.StructBuilder)
	if vf.Resource != nil {
		resourceB.Append(true)
		vf.Resource.WriteToParquet(resourceB)
	} else {
		resourceB.AppendNull()
	}

	// Field 19: severity.
	if vf.Severity != nil {
		rb.Field(19).(*array.StringBuilder).Append(*vf.Severity)
	} else {
		rb.Field(19).(*array.StringBuilder).AppendNull()
	}

	// Field 20: severity_id.
	rb.Field(20).(*array.Int32Builder).Append(vf.SeverityID)

	// Field 21: observables (list of Observable).
	observablesB := rb.Field(21).(*array.ListBuilder)
	if len(vf.Observables) > 0 {
		observablesB.Append(true)
		observablesValB := observablesB.ValueBuilder().(*array.StructBuilder)
		for _, obs := range vf.Observables {
			observablesValB.Append(true)
			obs.WriteToParquet(observablesValB)
		}
	} else {
		observablesB.AppendNull()
	}

	// Field 22: raw_data.
	rawDataB := rb.Field(22).(*array.StringBuilder)
	if vf.RawData != nil {
		rawDataB.Append(*vf.RawData)
	} else {
		rawDataB.AppendNull()
	}

	// Field 23: start_time.
	if vf.StartTime != nil {
		rb.Field(23).(*array.StringBuilder).Append(vf.StartTime.Format(time.RFC3339))
	} else {
		rb.Field(23).(*array.StringBuilder).AppendNull()
	}

	// Field 24: status.
	if vf.Status != nil {
		rb.Field(24).(*array.StringBuilder).Append(*vf.Status)
	} else {
		rb.Field(24).(*array.StringBuilder).AppendNull()
	}

	// Field 25: status_code.
	if vf.StatusCode != nil {
		rb.Field(25).(*array.StringBuilder).Append(*vf.StatusCode)
	} else {
		rb.Field(25).(*array.StringBuilder).AppendNull()
	}

	// Field 26: status_detail.
	if vf.StatusDetail != nil {
		rb.Field(26).(*array.StringBuilder).Append(*vf.StatusDetail)
	} else {
		rb.Field(26).(*array.StringBuilder).AppendNull()
	}

	// Field 27: status_id.
	if vf.StatusID != nil {
		rb.Field(27).(*array.Int32Builder).Append(*vf.StatusID)
	} else {
		rb.Field(27).(*array.Int32Builder).AppendNull()
	}

	// Field 28: timezone_offset.
	if vf.TimezoneOffset != nil {
		rb.Field(28).(*array.Int32Builder).Append(*vf.TimezoneOffset)
	} else {
		rb.Field(28).(*array.Int32Builder).AppendNull()
	}

	// Field 29: type_uid.
	rb.Field(29).(*array.Int64Builder).Append(vf.TypeUID)

	// Field 30: type_name.
	if vf.TypeName != nil {
		rb.Field(30).(*array.StringBuilder).Append(*vf.TypeName)
	} else {
		rb.Field(30).(*array.StringBuilder).AppendNull()
	}

	// Field 31: unmapped.
	rb.Field(31).(*array.StringBuilder).Append(vf.Unmapped)

	// Field 32: vulnerabilities (list of VulnerabilityDetails).
	vulnsB := rb.Field(32).(*array.ListBuilder)
	if len(vf.Vulnerabilities) > 0 {
		vulnsB.Append(true)
		vulnsValB := vulnsB.ValueBuilder().(*array.StructBuilder)
		for _, v := range vf.Vulnerabilities {
			vulnsValB.Append(true)
			v.WriteToParquet(vulnsValB)
		}
	} else {
		vulnsB.AppendNull()
	}
}
