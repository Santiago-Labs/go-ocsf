package ocsf

import (
	"github.com/apache/arrow-go/v18/arrow"
)

var VulnerabilityFindingFields = []arrow.Field{
	{Name: "event_day", Type: arrow.FixedWidthTypes.Date32, Nullable: false},
	{Name: "time", Type: arrow.FixedWidthTypes.Timestamp_s, Nullable: false},
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "activity_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "category_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "class_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "comment", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "confidence", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "confidence_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "confidence_score", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "end_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "enrichments", Type: arrow.ListOf(EnrichmentStruct), Nullable: true},
	{Name: "finding_info", Type: FindingInfoStruct, Nullable: false},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metadata", Type: MetadataStruct, Nullable: false},
	{Name: "resources", Type: arrow.ListOf(ResourceDetailsStruct), Nullable: true},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "observables", Type: arrow.ListOf(ObservableStruct), Nullable: true},
	{Name: "raw_data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "start_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_detail", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "type_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "unmapped", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vulnerabilities", Type: arrow.ListOf(VulnerabilityDetailsStruct), Nullable: true},
}

var VulnerabilityFindingStruct = arrow.StructOf(VulnerabilityFindingFields...)
var VulnerabilityFindingSchema = arrow.NewSchema(VulnerabilityFindingFields, nil)

var VulnerabilityFindingClassname = "vulnerability_finding"

type VulnerabilityFinding struct {
	Time            int64                   `json:"time" parquet:"time,timestamp" ch:"time"`
	EventDay        int32                   `json:"event_day" parquet:"event_day,date" ch:"event_day"` // Used for partitioning
	ActivityID      int32                   `json:"activity_id" parquet:"activity_id" ch:"activity_id"`
	ActivityName    *string                 `json:"activity_name" parquet:"activity_name,optional" ch:"activity_name"`
	CategoryUID     int32                   `json:"category_uid" parquet:"category_uid" ch:"category_uid"`
	CategoryName    *string                 `json:"category_name" parquet:"category_name,optional" ch:"category_name"`
	ClassUID        int32                   `json:"class_uid" parquet:"class_uid" ch:"class_uid"`
	ClassName       *string                 `json:"class_name" parquet:"class_name,optional" ch:"class_name"`
	Comment         *string                 `json:"comment" parquet:"comment,optional" ch:"comment"`
	Confidence      *string                 `json:"confidence" parquet:"confidence,optional" ch:"confidence"`
	ConfidenceID    *int32                  `json:"confidence_id" parquet:"confidence_id,optional" ch:"confidence_id"`
	ConfidenceScore *int32                  `json:"confidence_score" parquet:"confidence_score,optional" ch:"confidence_score"`
	Count           *int32                  `json:"count" parquet:"count,optional" ch:"count"`
	Duration        *int32                  `json:"duration" parquet:"duration,optional" ch:"duration"`
	EndTime         *int64                  `json:"end_time" parquet:"end_time,optional" ch:"end_time"`
	Enrichments     []*Enrichment           `json:"enrichments,omitempty" parquet:"enrichments,list,optional" ch:"enrichments"`
	FindingInfo     FindingInfo             `json:"finding_info" parquet:"finding_info" ch:"finding_info"`
	Message         *string                 `json:"message" parquet:"message,optional" ch:"message"`
	Metadata        Metadata                `json:"metadata" parquet:"metadata" ch:"metadata"`
	Resources       []*ResourceDetails      `json:"resources,omitempty" parquet:"resources,list,optional" ch:"resources"`
	Severity        *string                 `json:"severity" parquet:"severity,optional" ch:"severity"`
	SeverityID      int32                   `json:"severity_id" parquet:"severity_id" ch:"severity_id"`
	Observables     []*Observable           `json:"observables,omitempty" parquet:"observables,list,optional" ch:"observables"`
	RawData         *string                 `json:"raw_data" parquet:"raw_data,optional" ch:"raw_data"`
	StartTime       *int64                  `json:"start_time" parquet:"start_time,optional" ch:"start_time"`
	Status          *string                 `json:"status" parquet:"status,optional" ch:"status"`
	StatusCode      *string                 `json:"status_code" parquet:"status_code,optional" ch:"status_code"`
	StatusDetail    *string                 `json:"status_detail" parquet:"status_detail,optional" ch:"status_detail"`
	StatusID        *int32                  `json:"status_id" parquet:"status_id,optional" ch:"status_id"`
	TimezoneOffset  *int32                  `json:"timezone_offset" parquet:"timezone_offset,optional" ch:"timezone_offset"`
	TypeUID         int64                   `json:"type_uid" parquet:"type_uid" ch:"type_uid"`
	TypeName        *string                 `json:"type_name" parquet:"type_name,optional" ch:"type_name"`
	Unmapped        *string                 `json:"unmapped" parquet:"unmapped,optional" ch:"unmapped"`
	Vulnerabilities []*VulnerabilityDetails `json:"vulnerabilities,omitempty" parquet:"vulnerabilities,list,optional" ch:"vulnerabilities"`
}
