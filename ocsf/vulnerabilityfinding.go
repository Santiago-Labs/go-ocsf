package ocsf

import (
	"time"

	"github.com/apache/arrow/go/v15/arrow"
)

var VulnerabilityFindingFields = []arrow.Field{
	{Name: "time", Type: arrow.BinaryTypes.String},
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "activity_name", Type: arrow.BinaryTypes.String},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32},
	{Name: "category_name", Type: arrow.BinaryTypes.String},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32},
	{Name: "class_name", Type: arrow.BinaryTypes.String},
	{Name: "comment", Type: arrow.BinaryTypes.String},
	{Name: "confidence", Type: arrow.BinaryTypes.String},
	{Name: "confidence_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "confidence_score", Type: arrow.PrimitiveTypes.Int32},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int32},
	{Name: "end_time", Type: arrow.BinaryTypes.String},
	{Name: "enrichments", Type: arrow.ListOf(arrow.StructOf(EnrichmentFields...))},
	{Name: "finding_info", Type: arrow.StructOf(FindingInfoFields...)},
	{Name: "message", Type: arrow.BinaryTypes.String},
	{Name: "metadata", Type: arrow.StructOf(MetadataFields...)},
	{Name: "resource", Type: arrow.StructOf(ResourceDetailsFields...)},
	{Name: "severity", Type: arrow.BinaryTypes.String},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "observables", Type: arrow.ListOf(arrow.StructOf(ObservableFields...))},
	{Name: "raw_data", Type: arrow.BinaryTypes.String},
	{Name: "start_time", Type: arrow.BinaryTypes.String},
	{Name: "status", Type: arrow.BinaryTypes.String},
	{Name: "status_code", Type: arrow.BinaryTypes.String},
	{Name: "status_detail", Type: arrow.BinaryTypes.String},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64},
	{Name: "type_name", Type: arrow.BinaryTypes.String},
	{Name: "unmapped", Type: arrow.BinaryTypes.String},
	{Name: "vulnerabilities", Type: arrow.ListOf(arrow.StructOf(VulnerabilityDetailsFields...))},
}

var VulnerabilityFindingSchema = arrow.NewSchema(VulnerabilityFindingFields, nil)

type VulnerabilityFinding struct {
	Time            time.Time              `json:"time" parquet:"time"`
	ActivityID      int32                  `json:"activity_id" parquet:"activity_id"`
	ActivityName    *string                `json:"activity_name" parquet:"activity_name"`
	CategoryUID     int32                  `json:"category_uid" parquet:"category_uid"`
	CategoryName    *string                `json:"category_name" parquet:"category_name"`
	ClassUID        int32                  `json:"class_uid" parquet:"class_uid"`
	ClassName       *string                `json:"class_name" parquet:"class_name"`
	Comment         *string                `json:"comment" parquet:"comment"`
	Confidence      *string                `json:"confidence" parquet:"confidence"`
	ConfidenceID    *int32                 `json:"confidence_id" parquet:"confidence_id"`
	ConfidenceScore *int32                 `json:"confidence_score" parquet:"confidence_score"`
	Count           *int32                 `json:"count" parquet:"count"`
	Duration        *int32                 `json:"duration" parquet:"duration"`
	EndTime         *time.Time             `json:"end_time" parquet:"end_time"`
	Enrichments     []Enrichment           `json:"enrichments,omitempty" parquet:"enrichments"`
	FindingInfo     FindingInfo            `json:"finding_info" parquet:"finding_info"`
	Message         *string                `json:"message" parquet:"message"`
	Metadata        Metadata               `json:"metadata" parquet:"metadata"`
	Resource        *ResourceDetails       `json:"resource,omitempty" parquet:"resource"`
	Severity        *string                `json:"severity" parquet:"severity"`
	SeverityID      int32                  `json:"severity_id" parquet:"severity_id"`
	Observables     []Observable           `json:"observables,omitempty" parquet:"observables"`
	RawData         *string                `json:"raw_data" parquet:"raw_data"`
	StartTime       *time.Time             `json:"start_time" parquet:"start_time"`
	Status          *string                `json:"status" parquet:"status"`
	StatusCode      *string                `json:"status_code" parquet:"status_code"`
	StatusDetail    *string                `json:"status_detail" parquet:"status_detail"`
	StatusID        *int32                 `json:"status_id" parquet:"status_id"`
	TimezoneOffset  *int32                 `json:"timezone_offset" parquet:"timezone_offset"`
	TypeUID         int64                  `json:"type_uid" parquet:"type_uid"`
	TypeName        *string                `json:"type_name" parquet:"type_name"`
	Unmapped        string                 `json:"unmapped" parquet:"unmapped"`
	Vulnerabilities []VulnerabilityDetails `json:"vulnerabilities" parquet:"vulnerabilities"`
}
