// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"fmt"

	"github.com/Santiago-Labs/go-ocsf/ocsf"
	"github.com/apache/arrow-go/v18/arrow"
)

type EmailActivity struct {

	// Activity ID: The normalized identifier of the activity that triggered the event.
	ActivityId int32 `json:"activity_id" parquet:"activity_id"`

	// Activity: The event activity name, as defined by the activity_id.
	ActivityName *string `json:"activity_name,omitempty" parquet:"activity_name,optional"`

	// Attempt: The attempt number for attempting to deliver the email.
	Attempt *int32 `json:"attempt,omitempty" parquet:"attempt,optional"`

	// Protocol Banner: The initial connection response that a messaging server receives after it connects to an email server.
	Banner *string `json:"banner,omitempty" parquet:"banner,optional"`

	// Category: The event category name, as defined by category_uid value: <code>Network Activity</code>.
	CategoryName *string `json:"category_name,omitempty" parquet:"category_name,optional"`

	// Category ID: The category unique identifier of the event.
	CategoryUid int32 `json:"category_uid" parquet:"category_uid"`

	// Class: The event class name, as defined by class_uid value: <code>Email Activity</code>.
	ClassName *string `json:"class_name,omitempty" parquet:"class_name,optional"`

	// Class ID: The unique identifier of a class. A class describes the attributes available in an event.
	ClassUid int32 `json:"class_uid" parquet:"class_uid"`

	// Cloud: Describes details about the Cloud environment where the event was originally created or logged.
	Cloud Cloud `json:"cloud" parquet:"cloud"`

	// Command: The command issued by the initiator (client), such as SMTP HELO or EHLO.
	Command *string `json:"command,omitempty" parquet:"command,optional"`

	// Count: The number of times that events in the same logical group occurred during the event <strong>Start Time</strong> to <strong>End Time</strong> period.
	Count *int32 `json:"count,omitempty" parquet:"count,optional"`

	// Direction: The direction of the email, as defined by the <code>direction_id</code> value.
	Direction *string `json:"direction,omitempty" parquet:"direction,optional"`

	// Direction ID: <p>The direction of the email relative to the scanning host or organization.</p>Email scanned at an internet gateway might be characterized as inbound to the organization from the Internet, outbound from the organization to the Internet, or internal within the organization. Email scanned at a workstation might be characterized as inbound to, or outbound from the workstation.
	DirectionId int32 `json:"direction_id" parquet:"direction_id"`

	// Destination Endpoint: The responder (server) receiving the email.
	DstEndpoint *NetworkEndpoint `json:"dst_endpoint,omitempty" parquet:"dst_endpoint,optional"`

	// Duration Milliseconds: The event duration or aggregate time, the amount of time the event covers from <code>start_time</code> to <code>end_time</code> in milliseconds.
	Duration *int64 `json:"duration,omitempty" parquet:"duration,optional"`

	// Email: The email object.
	Email Email `json:"email" parquet:"email"`

	// Email Authentication: The SPF, DKIM and DMARC attributes of an email.
	EmailAuth *EmailAuthentication `json:"email_auth,omitempty" parquet:"email_auth,optional"`

	// End Time: The end time of a time period, or the time of the most recent event included in the aggregate event.
	EndTime int64 `json:"end_time,omitempty" parquet:"end_time,timestamp_millis,timestamp(millisecond),optional"`

	// Enrichments: The additional information from an external data source, which is associated with the event or a finding. For example add location information for the IP address in the DNS answers:</p><code>[{"name": "answers.ip", "value": "92.24.47.250", "type": "location", "data": {"city": "Socotra", "continent": "Asia", "coordinates": [-25.4153, 17.0743], "country": "YE", "desc": "Yemen"}}]</code>
	Enrichments []Enrichment `json:"enrichments,omitempty" parquet:"enrichments,list,optional"`

	// Message: The description of the event/finding, as defined by the source.
	Message *string `json:"message,omitempty" parquet:"message,optional"`

	// Message Trace UID: The identifier that tracks a message that travels through multiple points of a messaging service.
	MessageTraceUid *string `json:"message_trace_uid,omitempty" parquet:"message_trace_uid,optional"`

	// Metadata: The metadata associated with the event or a finding.
	Metadata Metadata `json:"metadata" parquet:"metadata"`

	// Observables: The observables associated with the event or a finding.
	Observables []Observable `json:"observables,omitempty" parquet:"observables,list,optional"`

	// OSINT: The OSINT (Open Source Intelligence) object contains details related to an indicator such as the indicator itself, related indicators, geolocation, registrar information, subdomains, analyst commentary, and other contextual information. This information can be used to further enrich a detection or finding by providing decisioning support to other analysts and engineers.
	Osint []OSINT `json:"osint" parquet:"osint,list"`

	// Protocol Name: The Protocol Name specifies the email communication protocol, such as SMTP, IMAP, or POP3.
	ProtocolName *string `json:"protocol_name,omitempty" parquet:"protocol_name,optional"`

	// Raw Data: The raw event/finding data as received from the source.
	RawData *string `json:"raw_data,omitempty" parquet:"raw_data,optional"`

	// Raw Data Size: The size of the raw data which was transformed into an OCSF event, in bytes.
	RawDataSize *int64 `json:"raw_data_size,omitempty" parquet:"raw_data_size,optional"`

	// Severity: The event/finding severity, normalized to the caption of the <code>severity_id</code> value. In the case of 'Other', it is defined by the source.
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Severity ID: <p>The normalized identifier of the event/finding severity.</p>The normalized severity is a measurement the effort and expense required to manage and resolve an event or incident. Smaller numerical values represent lower impact events, and larger numerical values represent higher impact events.
	SeverityId int32 `json:"severity_id" parquet:"severity_id"`

	// Source Endpoint: The initiator (client) sending the email.
	SrcEndpoint *NetworkEndpoint `json:"src_endpoint,omitempty" parquet:"src_endpoint,optional"`

	// Start Time: The start time of a time period, or the time of the least recent event included in the aggregate event.
	StartTime int64 `json:"start_time,omitempty" parquet:"start_time,timestamp_millis,timestamp(millisecond),optional"`

	// Status: The event status, normalized to the caption of the status_id value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty" parquet:"status,optional"`

	// Status Code: The event status code, as reported by the event source.<br /><br />For example, in a Windows Failed Authentication event, this would be the value of 'Failure Code', e.g. 0x18.
	StatusCode *string `json:"status_code,omitempty" parquet:"status_code,optional"`

	// Status Detail: The status detail contains additional information about the event/finding outcome.
	StatusDetail *string `json:"status_detail,omitempty" parquet:"status_detail,optional"`

	// Status ID: The normalized identifier of the event status.
	StatusId *int32 `json:"status_id,omitempty" parquet:"status_id,optional"`

	// Event Time: The normalized event occurrence time or the finding creation time.
	Time int64 `json:"time" parquet:"time,timestamp_millis,timestamp(millisecond)"`

	// Timezone Offset: The number of minutes that the reported event <code>time</code> is ahead or behind UTC, in the range -1,080 to +1,080.
	TimezoneOffset *int32 `json:"timezone_offset,omitempty" parquet:"timezone_offset,optional"`

	// Type Name: The event/finding type name, as defined by the type_uid.
	TypeName *string `json:"type_name,omitempty" parquet:"type_name,optional"`

	// Type ID: The event/finding type ID. It identifies the event's semantics and structure. The value is calculated by the logging system as: <code>class_uid * 100 + activity_id</code>.
	TypeUid int64 `json:"type_uid" parquet:"type_uid"`

	// Unmapped Data: The attributes that are not mapped to the event schema. The names and values of those attributes are specific to the event source.
	Unmapped *string `json:"unmapped,omitempty" parquet:"unmapped,optional"`
}

func (v *EmailActivity) Observable() (*int, string) {
	return nil, ""
}

func (v *EmailActivity) ValidateObservables() error {
	presentObservables := ocsf.PresentObservablesOf(v)
	for presObsIdx := range presentObservables {
		var found bool
		for obsIdx := range v.Observables {
			presObsEnum := presentObservables[presObsIdx][0].(*int)
			if v.Observables[obsIdx].TypeId == int32(*presObsEnum) {
				found = true
				break
			}
		}
		if !found {
			obs := presentObservables[presObsIdx]
			return fmt.Errorf("non-null observable %s(%d) not found in observables array", obs[1], *obs[0].(*int))
		}
	}
	return nil
}

var EmailActivityFields = []arrow.Field{
	{Name: "activity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "activity_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "attempt", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "banner", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "class_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "class_uid", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "cloud", Type: CloudStruct, Nullable: false},
	{Name: "command", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "count", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "direction", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "direction_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "dst_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "duration", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "email", Type: EmailStruct, Nullable: false},
	{Name: "email_auth", Type: EmailAuthenticationStruct, Nullable: true},
	{Name: "end_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "enrichments", Type: arrow.ListOf(EnrichmentStruct), Nullable: true},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "message_trace_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "metadata", Type: MetadataStruct, Nullable: false},
	{Name: "observables", Type: arrow.ListOf(ObservableStruct), Nullable: true},
	{Name: "osint", Type: arrow.ListOf(OSINTStruct), Nullable: false},
	{Name: "protocol_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "raw_data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "raw_data_size", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "severity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "src_endpoint", Type: NetworkEndpointStruct, Nullable: true},
	{Name: "start_time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: true},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_detail", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "time", Type: arrow.FixedWidthTypes.Timestamp_ms, Nullable: false},
	{Name: "timezone_offset", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_uid", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "unmapped", Type: arrow.BinaryTypes.String, Nullable: true},
}

var EmailActivityStruct = arrow.StructOf(EmailActivityFields...)

var EmailActivitySchema = arrow.NewSchema(EmailActivityFields, nil)
var EmailActivityClassname = "email_activity"
