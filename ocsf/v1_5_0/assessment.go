// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Assessment struct {

	// Category: The category that the assessment is part of. For example: <code>Prevention</code> or <code>Windows 10</code>.
	Category *string `json:"category,omitempty" parquet:"category,optional"`

	// Description: The description of the assessment criteria, or a description of the specific configuration or signal the assessment is targeting.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Meets Criteria: Determines whether the assessment against the specific configuration or signal meets the assessments criteria. For example, if the assessment checks if a <code>Datastore</code> is encrypted or not, having encryption would be evaluated as <code>true</code>.
	MeetsCriteria bool `json:"meets_criteria" parquet:"meets_criteria"`

	// Name: The name of the configuration or signal being assessed. For example: <code>Kernel Mode Code Integrity (KMCI)</code> or <code>publicAccessibilityState</code>.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Assessment Policy: The details of any policy associated with an assessment.
	Policy *Policy `json:"policy,omitempty" parquet:"policy,optional"`

	// Unique ID: The unique identifier of the configuration or signal being assessed. For example: the <code>signal_id</code>.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

func (v *Assessment) Observable() (*int, string) {
	return nil, ""
}

var AssessmentFields = []arrow.Field{
	{Name: "category", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "meets_criteria", Type: arrow.FixedWidthTypes.Boolean, Nullable: false},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "policy", Type: PolicyStruct, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var AssessmentStruct = arrow.StructOf(AssessmentFields...)

var AssessmentSchema = arrow.NewSchema(AssessmentFields, nil)
var AssessmentClassname = "assessment"
