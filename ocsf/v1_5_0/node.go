// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Node struct {

	// Data: Additional data about the node stored as key-value pairs. Can include custom properties specific to the node.
	Data *string `json:"data,omitempty" parquet:"data,optional"`

	// Description: A human-readable description of the node's purpose or meaning in the graph.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Name: A human-readable name or label for the node. Should be descriptive and unique within the graph context.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Type: Categorizes the node into a specific class or type. Useful for grouping and filtering nodes.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Unique ID: A unique string or numeric identifier that distinguishes this node from all others in the graph. Must be unique across all nodes.
	Uid string `json:"uid" parquet:"uid"`
}

func (v *Node) Observable() (*int, string) {
	return nil, ""
}

var NodeFields = []arrow.Field{
	{Name: "data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: false},
}

var NodeStruct = arrow.StructOf(NodeFields...)

var NodeSchema = arrow.NewSchema(NodeFields, nil)
var NodeClassname = "node"
