// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type QueryEvidence struct {

	// Connection Info: The network connection information related to a Network Connection query type.
	ConnectionInfo *NetworkConnectionInformation `json:"connection_info,omitempty" parquet:"connection_info,optional"`

	// File: The file that is the target of the query when query_type_id indicates a File query.
	File *File `json:"file,omitempty" parquet:"file,optional"`

	// Folder: The folder that is the target of the query when query_type_id indicates a Folder query.
	Folder *File `json:"folder,omitempty" parquet:"folder,optional"`

	// Group: The administrative group that is the target of the query when query_type_id indicates an Admin Group query.
	Group *Group `json:"group,omitempty" parquet:"group,optional"`

	// Job: The job object that pertains to the event when query_type_id indicates a Job query.
	Job *Job `json:"job,omitempty" parquet:"job,optional"`

	// Kernel: The kernel object that pertains to the event when query_type_id indicates a Kernel query.
	Kernel *KernelResource `json:"kernel,omitempty" parquet:"kernel,optional"`

	// Module: The module that pertains to the event when query_type_id indicates a Module query.
	Module *Module `json:"module,omitempty" parquet:"module,optional"`

	// Network Interfaces: The physical or virtual network interfaces that are associated with the device when query_type_id indicates a Network Interfaces query.
	NetworkInterfaces []*NetworkInterface `json:"network_interfaces,omitempty" parquet:"network_interfaces,optional,list"`

	// Peripheral Device: The peripheral device that triggered the event when query_type_id indicates a Peripheral Device query.
	PeripheralDevice *PeripheralDevice `json:"peripheral_device,omitempty" parquet:"peripheral_device,optional"`

	// Process: The process that pertains to the event when query_type_id indicates a Process query.
	Process *Process `json:"process,omitempty" parquet:"process,optional"`

	// Query Type: The normalized caption of query_type_id or the source-specific query type.
	QueryType *string `json:"query_type,omitempty" parquet:"query_type,optional"`

	// Query Type ID: The normalized type of system query performed against a device or system component.
	QueryTypeId int32 `json:"query_type_id" parquet:"query_type_id"`

	// Registry Key: The registry key object describes a Windows registry key.
	RegKey *RegistryKey `json:"reg_key,omitempty" parquet:"reg_key,optional"`

	// Registry Value: The registry key object describes a Windows registry value.
	RegValue *RegistryValue `json:"reg_value,omitempty" parquet:"reg_value,optional"`

	// Service: The service that pertains to the event when query_type_id indicates a Service query.
	Service *Service `json:"service,omitempty" parquet:"service,optional"`

	// Session: The authenticated user or service session when query_type_id indicates a Session query.
	Session *Session `json:"session,omitempty" parquet:"session,optional"`

	// Startup Item: The startup item object that pertains to the event when query_type_id indicates a Startup Item query.
	StartupItem *StartupItem `json:"startup_item,omitempty" parquet:"startup_item,optional"`

	// Network Connection State: The state of the socket, normalized to the caption of the state_id value. In the case of 'Other', it is defined by the event source.
	State *string `json:"state,omitempty" parquet:"state,optional"`

	// TCP State ID: The state of the TCP socket for the network connection.
	TcpStateId *int32 `json:"tcp_state_id,omitempty" parquet:"tcp_state_id,optional"`

	// User: The user that pertains to the event when query_type_id indicates a User query.
	User *User `json:"user,omitempty" parquet:"user,optional"`

	// Users: The users that belong to the administrative group when query_type_id indicates a Users query.
	Users []*User `json:"users,omitempty" parquet:"users,optional,list"`
}

var QueryEvidenceFields = []arrow.Field{
	{Name: "connection_info", Type: NetworkConnectionInformationStruct, Nullable: true},
	{Name: "file", Type: FileStruct, Nullable: true},
	{Name: "folder", Type: FileStruct, Nullable: true},
	{Name: "group", Type: GroupStruct, Nullable: true},
	{Name: "job", Type: JobStruct, Nullable: true},
	{Name: "kernel", Type: KernelResourceStruct, Nullable: true},
	{Name: "module", Type: ModuleStruct, Nullable: true},
	{Name: "network_interfaces", Type: arrow.ListOf(NetworkInterfaceStruct), Nullable: true},
	{Name: "peripheral_device", Type: PeripheralDeviceStruct, Nullable: true},
	{Name: "process", Type: ProcessStruct, Nullable: true},
	{Name: "query_type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "query_type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "reg_key", Type: RegistryKeyStruct, Nullable: true},
	{Name: "reg_value", Type: RegistryValueStruct, Nullable: true},
	{Name: "service", Type: ServiceStruct, Nullable: true},
	{Name: "session", Type: SessionStruct, Nullable: true},
	{Name: "startup_item", Type: StartupItemStruct, Nullable: true},
	{Name: "state", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "tcp_state_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "user", Type: UserStruct, Nullable: true},
	{Name: "users", Type: arrow.ListOf(UserStruct), Nullable: true},
}

var QueryEvidenceStruct = arrow.StructOf(QueryEvidenceFields...)

var QueryEvidenceSchema = arrow.NewSchema(QueryEvidenceFields, nil)
