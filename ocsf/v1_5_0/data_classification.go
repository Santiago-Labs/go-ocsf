// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type DataClassification struct {

	// Category: The name of the data classification category that data matched into, e.g. Financial, Personal, Governmental, etc.
	Category *string `json:"category,omitempty" parquet:"category,optional"`

	// Category ID: The normalized identifier of the data classification category.
	CategoryId *int32 `json:"category_id,omitempty" parquet:"category_id,optional"`

	// Classifier Details: Describes details about the classifier used for data classification.
	ClassifierDetails *ClassifierDetails `json:"classifier_details,omitempty" parquet:"classifier_details,optional"`

	// Confidentiality: The file content confidentiality, normalized to the confidentiality_id value. In the case of 'Other', it is defined by the event source.
	Confidentiality *string `json:"confidentiality,omitempty" parquet:"confidentiality,optional"`

	// Confidentiality ID: The normalized identifier of the file content confidentiality indicator.
	ConfidentialityId *int32 `json:"confidentiality_id,omitempty" parquet:"confidentiality_id,optional"`

	// Discovery Details: Details about the data discovered by classification job.
	DiscoveryDetails []*DiscoveryDetails `json:"discovery_details,omitempty" parquet:"discovery_details,optional,list"`

	// Policy: Details about the data policy that governs data handling and security measures related to classification.
	Policy *Policy `json:"policy,omitempty" parquet:"policy,optional"`

	// Size: Size of the data classified.
	Size *int64 `json:"size,omitempty" parquet:"size,optional"`

	// Source URL: The source URL pointing towards the full classifcation job details.
	SrcUrl *string `json:"src_url,omitempty" parquet:"src_url,optional"`

	// Status: The resultant status of the classification job normalized to the caption of the <code>status_id</code> value. In the case of 'Other', it is defined by the event source.
	Status *string `json:"status,omitempty" parquet:"status,optional"`

	// Status Details: The contextual description of the <code>status, status_id</code> value.
	StatusDetails []string `json:"status_details,omitempty" parquet:"status_details,optional,list"`

	// Status ID: The normalized status identifier of the classification job.
	StatusId *int32 `json:"status_id,omitempty" parquet:"status_id,optional"`

	// Total: The total count of discovered entities, by the classification job.
	Total *int32 `json:"total,omitempty" parquet:"total,optional"`

	// Unique ID: The unique identifier of the classification job.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

var DataClassificationFields = []arrow.Field{
	{Name: "category", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "category_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "classifier_details", Type: ClassifierDetailsStruct, Nullable: true},
	{Name: "confidentiality", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "confidentiality_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "discovery_details", Type: arrow.ListOf(DiscoveryDetailsStruct), Nullable: true},
	{Name: "policy", Type: PolicyStruct, Nullable: true},
	{Name: "size", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "src_url", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "status_details", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "status_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "total", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var DataClassificationStruct = arrow.StructOf(DataClassificationFields...)

var DataClassificationSchema = arrow.NewSchema(DataClassificationFields, nil)
