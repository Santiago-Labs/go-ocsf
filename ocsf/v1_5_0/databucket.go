// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Databucket struct {

	// Agent List: A list of <code>agent</code> objects associated with a device, endpoint, or resource.
	AgentList []*Agent `json:"agent_list,omitempty" parquet:"agent_list,optional,list"`

	// Cloud Partition: The canonical cloud partition name to which the region is assigned (e.g. AWS Partitions: aws, aws-cn, aws-us-gov).
	CloudPartition *string `json:"cloud_partition,omitempty" parquet:"cloud_partition,optional"`

	// Created Time: The time when the databucket was known to have been created.
	CreatedTime *int64 `json:"created_time,omitempty" parquet:"created_time,optional"`

	// Criticality: The criticality of the resource as defined by the event source.
	Criticality *string `json:"criticality,omitempty" parquet:"criticality,optional"`

	// Data: Additional data describing the resource.
	Data *string `json:"data,omitempty" parquet:"data,optional"`

	// Data Classification: A list of Data Classification objects, that include information about data classification levels and data category types, indentified by a classifier.
	DataClassifications []*DataClassification `json:"data_classifications,omitempty" parquet:"data_classifications,optional,list"`

	// Description: The description of the databucket.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Encryption Details: The encryption details of the databucket. Should be populated if the databucket is encrypted.
	EncryptionDetails *EncryptionDetails `json:"encryption_details,omitempty" parquet:"encryption_details,optional"`

	// File: Details about the file/object within a databucket.
	File *File `json:"file,omitempty" parquet:"file,optional"`

	// Group: The name of the related resource group.
	Group *Group `json:"group,omitempty" parquet:"group,optional"`

	// Groups: The group names to which the databucket belongs.
	Groups []*Group `json:"groups,omitempty" parquet:"groups,optional,list"`

	// Hostname: The fully qualified name of the resource.
	Hostname *string `json:"hostname,omitempty" parquet:"hostname,optional"`

	// IP Address: The IP address of the resource, in either IPv4 or IPv6 format.
	Ip *string `json:"ip,omitempty" parquet:"ip,optional"`

	// Back Ups Configured: Indicates whether the device or resource has a backup enabled, such as an automated snapshot or a cloud backup. For example, this is indicated by the <code>cloudBackupEnabled</code> value within JAMF Pro mobile devices or the registration of an AWS ARN with the AWS Backup service.
	IsBackedUp *bool `json:"is_backed_up,omitempty" parquet:"is_backed_up,optional"`

	// Encrypted: Indicates if the databucket is encrypted.
	IsEncrypted *bool `json:"is_encrypted,omitempty" parquet:"is_encrypted,optional"`

	// Public: Indicates if the databucket is publicly accessible.
	IsPublic *bool `json:"is_public,omitempty" parquet:"is_public,optional"`

	// Labels: The list of labels associated to the resource.
	Labels []string `json:"labels,omitempty" parquet:"labels,optional,list"`

	// Modified Time: The most recent time when any changes, updates, or modifications were made within the databucket.
	ModifiedTime *int64 `json:"modified_time,omitempty" parquet:"modified_time,optional"`

	// Name: The databucket name.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Namespace: The namespace is useful when similar entities exist that you need to keep separate.
	Namespace *string `json:"namespace,omitempty" parquet:"namespace,optional"`

	// Owner: The identity of the service or user account that owns the resource.
	Owner *User `json:"owner,omitempty" parquet:"owner,optional"`

	// Region: The cloud region of the resource.
	Region *string `json:"region,omitempty" parquet:"region,optional"`

	// Resource Relationship: A graph representation showing how this resource relates to and interacts with other entities in the environment. This can include parent/child relationships, dependencies, or other connections.
	ResourceRelationship *Graph `json:"resource_relationship,omitempty" parquet:"resource_relationship,optional"`

	// Size: The size of the databucket in bytes.
	Size *int64 `json:"size,omitempty" parquet:"size,optional"`

	// Tags: The list of tags; <code>{key:value}</code> pairs associated to the resource.
	Tags []*KeyValueobject `json:"tags,omitempty" parquet:"tags,optional,list"`

	// Type: The databucket type.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The normalized identifier of the databucket type.
	TypeId int32 `json:"type_id" parquet:"type_id"`

	// Unique ID: The unique identifier of the databucket.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Alternate ID: The alternative unique identifier of the resource.
	UidAlt *string `json:"uid_alt,omitempty" parquet:"uid_alt,optional"`

	// Version: The version of the resource. For example <code>1.2.3</code>.
	Version *string `json:"version,omitempty" parquet:"version,optional"`

	// Cloud Availability Zone: The specific availability zone within a cloud region where the resource is located.
	Zone *string `json:"zone,omitempty" parquet:"zone,optional"`
}

var DatabucketFields = []arrow.Field{
	{Name: "agent_list", Type: arrow.ListOf(AgentStruct), Nullable: true},
	{Name: "cloud_partition", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "created_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "criticality", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "data", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "data_classifications", Type: arrow.ListOf(DataClassificationStruct), Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "encryption_details", Type: EncryptionDetailsStruct, Nullable: true},
	{Name: "file", Type: FileStruct, Nullable: true},
	{Name: "group", Type: GroupStruct, Nullable: true},
	{Name: "groups", Type: arrow.ListOf(GroupStruct), Nullable: true},
	{Name: "hostname", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "ip", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "is_backed_up", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_encrypted", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_public", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "labels", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "modified_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "namespace", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "owner", Type: UserStruct, Nullable: true},
	{Name: "region", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "resource_relationship", Type: GraphStruct, Nullable: true},
	{Name: "size", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "tags", Type: arrow.ListOf(KeyValueobjectStruct), Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid_alt", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "version", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "zone", Type: arrow.BinaryTypes.String, Nullable: true},
}

var DatabucketStruct = arrow.StructOf(DatabucketFields...)

var DatabucketSchema = arrow.NewSchema(DatabucketFields, nil)
