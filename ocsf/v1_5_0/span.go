// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Span struct {

	// Duration Milliseconds: The total time, in milliseconds, that the span represents, calculated as the difference between start_time and end_time. It reflects the operation's performance and latency, independent of event timestamps, and accounts for normalized times used by observability tools to ensure consistency across distributed systems.
	Duration *int64 `json:"duration,omitempty" parquet:"duration,optional"`

	// End Time: The end timestamp of the span, essential for identifying latency and performance bottlenecks. Like the start time, this timestamp is normalized across the observability system to ensure consistency, even when events are recorded across distributed services with unsynchronized clocks. Normalized time allows for accurate duration calculations and helps observability tools track performance across services, regardless of the individual system time settings.
	EndTime int64 `json:"end_time" parquet:"end_time"`

	// Message: The message in a span (often refered to as a span event) serves as a way to record significant moments or occurrences during the span's lifecycle. This content typically manifests as log entries, annotations, or semi-structured events as a string, providing additional granularity and context about what happens at specific points during the execution of an operation.
	Message *string `json:"message,omitempty" parquet:"message,optional"`

	// Operation: Describes an action performed in a span, such as API requests, database queries, or computations.
	Operation *string `json:"operation,omitempty" parquet:"operation,optional"`

	// Parent Unique ID: The ID of the parent span for this span object, establishing its relationship in the trace hierarchy.
	ParentUid *string `json:"parent_uid,omitempty" parquet:"parent_uid,optional"`

	// Service: Identifies the service or component that generates the span, helping trace its path through the distributed system.
	Service *Service `json:"service,omitempty" parquet:"service,optional"`

	// Start Time: The start timestamp of the span, essential for identifying latency and performance bottlenecks. This timestamp is normalized across the observability system, ensuring consistency even when events occur across distributed services with potentially unsynchronized clocks. By using normalized time, observability tools can provide accurate, uniform measurements of operation performance and latency, regardless of where or when the events actually occur.
	StartTime int64 `json:"start_time" parquet:"start_time"`

	// Status Code: Indicates the outcome of the operation in the span, such as success, failure, or error. Issues in a span typically refer to problems such as failed operations, timeouts, service unavailability, or errors in processing that can negatively impact the performance or reliability of the system. Tracking the `status_code` helps pinpoint these issues, enabling quicker identification and resolution of system inefficiencies or faults.
	StatusCode *string `json:"status_code,omitempty" parquet:"status_code,optional"`

	// Unique ID: The unique identifier for the span, used in distributed systems and microservices architectures to track and correlate requests across different components of an application. It enables tracing the flow of a request through various services.
	Uid string `json:"uid" parquet:"uid"`
}

var SpanFields = []arrow.Field{
	{Name: "duration", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "end_time", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "message", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "operation", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "parent_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "service", Type: ServiceStruct, Nullable: true},
	{Name: "start_time", Type: arrow.PrimitiveTypes.Int64, Nullable: false},
	{Name: "status_code", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: false},
}

var SpanStruct = arrow.StructOf(SpanFields...)

var SpanSchema = arrow.NewSchema(SpanFields, nil)
