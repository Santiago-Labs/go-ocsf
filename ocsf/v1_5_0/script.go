// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Script struct {

	// File: Present if this script is associated with a file. Not present in the case of a file-less script.
	File *File `json:"file,omitempty" parquet:"file,optional"`

	// Hashes: An array of the script's cryptographic hashes. Note that these hashes are calculated on the script in its original encoding, and not on the normalized UTF-8 encoding found in the <code>script_content</code> attribute.
	Hashes []*Fingerprint `json:"hashes,omitempty" parquet:"hashes,optional,list"`

	// Name: Unique identifier for the script or macro, independent of the containing file, used for tracking, auditing, and security analysis.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Parent Unique ID: This attribute relates a sub-script to a parent script having the matching <code>uid</code> attribute. In the case of PowerShell, sub-script execution can be identified by matching the activity correlation ID of the raw ETW events provided by the OS.
	ParentUid *string `json:"parent_uid,omitempty" parquet:"parent_uid,optional"`

	// Script Content: The script content, normalized to UTF-8 encoding irrespective of its original encoding. When emitting this attribute, it may be appropriate to truncate large scripts. When consuming this attribute, large scripts should be anticipated.
	ScriptContent LongString `json:"script_content" parquet:"script_content"`

	// Type: The script type, normalized to the caption of the <code>type_id</code> value. In the case of 'Other', it is defined by the event source.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The normalized script type ID.
	TypeId int32 `json:"type_id" parquet:"type_id"`

	// Unique ID: Some script engines assign a unique ID to each individual execution of a given script. This attribute captures that unique ID. In the case of PowerShell, the unique ID corresponds to the <code>ScriptBlockId</code> in the raw ETW events provided by the OS.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

var ScriptFields = []arrow.Field{
	{Name: "file", Type: FileStruct, Nullable: true},
	{Name: "hashes", Type: arrow.ListOf(FingerprintStruct), Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "parent_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "script_content", Type: LongStringStruct, Nullable: false},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var ScriptStruct = arrow.StructOf(ScriptFields...)

var ScriptSchema = arrow.NewSchema(ScriptFields, nil)
