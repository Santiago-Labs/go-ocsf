// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Actor struct {

	// Application Name: The client application or service that initiated the activity. This can be in conjunction with the <code>user</code> if present.  Note that <code>app_name</code> is distinct from the <code>process</code> if present.
	AppName *string `json:"app_name,omitempty" parquet:"app_name,optional"`

	// Application ID: The unique identifier of the client application or service that initiated the activity. This can be in conjunction with the <code>user</code> if present. Note that <code>app_name</code> is distinct from the <code>process.pid</code> or <code>process.uid</code> if present.
	AppUid *string `json:"app_uid,omitempty" parquet:"app_uid,optional"`

	// Authorization Information: Provides details about an authorization, such as authorization outcome, and any associated policies related to the activity/event.
	Authorizations []AuthorizationResult `json:"authorizations,omitempty" parquet:"authorizations,list,optional"`

	// Identity Provider: This object describes details about the Identity Provider used.
	Idp *IdentityProvider `json:"idp,omitempty" parquet:"idp,optional"`

	// Process: The process that initiated the activity.
	Process *Process `json:"process,omitempty" parquet:"process,optional"`

	// Session: The user session from which the activity was initiated.
	Session *Session `json:"session,omitempty" parquet:"session,optional"`

	// User: The user that initiated the activity or the user context from which the activity was initiated.
	User *User `json:"user,omitempty" parquet:"user,optional"`
}

func (v *Actor) Observable() (*int, string) {
	return nil, ""
}

var ActorFields = []arrow.Field{
	{Name: "app_name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "app_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "authorizations", Type: arrow.ListOf(AuthorizationResultStruct), Nullable: true},
	{Name: "idp", Type: IdentityProviderStruct, Nullable: true},
	{Name: "process", Type: ProcessStruct, Nullable: true},
	{Name: "session", Type: SessionStruct, Nullable: true},
	{Name: "user", Type: UserStruct, Nullable: true},
}

var ActorStruct = arrow.StructOf(ActorFields...)

var ActorSchema = arrow.NewSchema(ActorFields, nil)
var ActorClassname = "actor"
