// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type NetworkInterface struct {

	// Hostname: The hostname associated with the network interface.
	Hostname *string `json:"hostname,omitempty" parquet:"hostname,optional"`

	// IP Address: The IP address associated with the network interface.
	Ip *string `json:"ip,omitempty" parquet:"ip,optional"`

	// MAC Address: The MAC address of the network interface.
	Mac *string `json:"mac,omitempty" parquet:"mac,optional"`

	// Name: The name of the network interface.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Namespace: The namespace is useful in merger or acquisition situations. For example, when similar entities exist that you need to keep separate.
	Namespace *string `json:"namespace,omitempty" parquet:"namespace,optional"`

	// Subnet Prefix Length: The subnet prefix length determines the number of bits used to represent the network part of the IP address. The remaining bits are reserved for identifying individual hosts within that subnet.
	SubnetPrefix *int32 `json:"subnet_prefix,omitempty" parquet:"subnet_prefix,optional"`

	// Type: The type of network interface.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The network interface type identifier.
	TypeId int32 `json:"type_id" parquet:"type_id"`

	// Unique ID: The unique identifier for the network interface.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

func (v *NetworkInterface) Observable() (*int, string) {
	return nil, ""
}

var NetworkInterfaceFields = []arrow.Field{
	{Name: "hostname", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "ip", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "mac", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "namespace", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "subnet_prefix", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var NetworkInterfaceStruct = arrow.StructOf(NetworkInterfaceFields...)

var NetworkInterfaceSchema = arrow.NewSchema(NetworkInterfaceFields, nil)
var NetworkInterfaceClassname = "network_interface"
