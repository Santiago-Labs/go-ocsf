// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Observable struct {

	// Name: The full name of the observable attribute. The <code>name</code> is a pointer/reference to an attribute within the OCSF event data. For example: <code>file.name</code>.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Reputation Scores: Contains the original and normalized reputation scores.
	Reputation *Reputation `json:"reputation,omitempty" parquet:"reputation,optional"`

	// Type: The observable value type name.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The observable value type identifier.
	TypeId int32 `json:"type_id" parquet:"type_id"`

	// Value: The value associated with the observable attribute. The meaning of the value depends on the observable type.<br/>If the <code>name</code> refers to a scalar attribute, then the <code>value</code> is the value of the attribute.<br/>If the <code>name</code> refers to an object attribute, then the <code>value</code> is not populated.
	Value *string `json:"value,omitempty" parquet:"value,optional"`
}

var ObservableFields = []arrow.Field{
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "reputation", Type: ReputationStruct, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: false},
	{Name: "value", Type: arrow.BinaryTypes.String, Nullable: true},
}

var ObservableStruct = arrow.StructOf(ObservableFields...)

var ObservableSchema = arrow.NewSchema(ObservableFields, nil)
