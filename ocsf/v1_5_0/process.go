// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Process struct {

	// Ancestry: An array of Process Entities describing the extended parentage of this process object. Direct parent information sould be expressed through the <code>parent_process</code> attribute. The first array element is the direct parent of this process object. Subsequent list elements go up the process parentage hierarchy. That is, the array is sorted from newest to oldest process. It is recommended to only populate this field for the top-level process object.
	Ancestry []*ProcessEntity `json:"ancestry,omitempty" parquet:"ancestry,optional,list"`

	// Audit User ID: The audit user assigned at login by the audit subsystem.
	Auid *int32 `json:"auid,omitempty" parquet:"auid,optional"`

	// Command Line: The full command line used to launch an application, service, process, or job. For example: <code>ssh user@10.0.0.10</code>. If the command line is unavailable or missing, the empty string <code>”</code> is to be used.
	CmdLine *string `json:"cmd_line,omitempty" parquet:"cmd_line,optional"`

	// Container: The information describing an instance of a container. A container is a prepackaged, portable system image that runs isolated on an existing system using a container runtime like containerd.
	Container *Container `json:"container,omitempty" parquet:"container,optional"`

	// Common Process Identifier: A unique process identifier that can be assigned deterministically by multiple system data producers.
	Cpid *string `json:"cpid,omitempty" parquet:"cpid,optional"`

	// Created Time: The time when the process was created/started.
	CreatedTime *int64 `json:"created_time,omitempty" parquet:"created_time,optional"`

	// Effective Group ID: The effective group under which this process is running.
	Egid *int32 `json:"egid,omitempty" parquet:"egid,optional"`

	// Environment Variables: Environment variables associated with the process.
	EnvironmentVariables []*EnvironmentVariable `json:"environment_variables,omitempty" parquet:"environment_variables,optional,list"`

	// Effective User ID: The effective user under which this process is running.
	Euid *int32 `json:"euid,omitempty" parquet:"euid,optional"`

	// File: The process file object.
	File *File `json:"file,omitempty" parquet:"file,optional"`

	// Group: The group under which this process is running.
	Group *Group `json:"group,omitempty" parquet:"group,optional"`

	// Integrity: The process integrity level, normalized to the caption of the integrity_id value. In the case of 'Other', it is defined by the event source (Windows only).
	Integrity *string `json:"integrity,omitempty" parquet:"integrity,optional"`

	// Integrity Level: The normalized identifier of the process integrity level (Windows only).
	IntegrityId *int32 `json:"integrity_id,omitempty" parquet:"integrity_id,optional"`

	// Loaded Modules: The list of loaded module names.
	LoadedModules []string `json:"loaded_modules,omitempty" parquet:"loaded_modules,optional,list"`

	// Name: The friendly name of the process, for example: <code>Notepad++</code>.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Namespace PID: If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int32 `json:"namespace_pid,omitempty" parquet:"namespace_pid,optional"`

	// Parent Process: The parent process of this process object. It is recommended to only populate this field for the top-level process object, to prevent deep nesting. Additional ancestry information can be supplied in the <code>ancestry</code> attribute.
	ParentProcess *ProcessRef `json:"parent_process,omitempty" parquet:"parent_process,optional"`

	// Path: The process file path.
	Path *string `json:"path,omitempty" parquet:"path,optional"`

	// Process ID: The process identifier, as reported by the operating system. Process ID (PID) is a number used by the operating system to uniquely identify an active process.
	Pid *int32 `json:"pid,omitempty" parquet:"pid,optional"`

	// Sandbox: The name of the containment jail (i.e., sandbox). For example, hardened_ps, high_security_ps, oracle_ps, netsvcs_ps, or default_ps.
	Sandbox *string `json:"sandbox,omitempty" parquet:"sandbox,optional"`

	// Session: The user session under which this process is running.
	Session *Session `json:"session,omitempty" parquet:"session,optional"`

	// Terminated Time: The time when the process was terminated.
	TerminatedTime *int64 `json:"terminated_time,omitempty" parquet:"terminated_time,optional"`

	// Thread ID: The Identifier of the thread associated with the event, as returned by the operating system.
	Tid *int32 `json:"tid,omitempty" parquet:"tid,optional"`

	// Unique ID: A unique identifier for this process assigned by the producer (tool).  Facilitates correlation of a process event with other events for that process.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// User: The user under which this process is running.
	User *User `json:"user,omitempty" parquet:"user,optional"`

	// Working Directory: The working directory of a process.
	WorkingDirectory *string `json:"working_directory,omitempty" parquet:"working_directory,optional"`

	// Extended Attributes: An unordered collection of zero or more name/value pairs that represent a process extended attribute.
	Xattributes *string `json:"xattributes,omitempty" parquet:"xattributes,optional"`
}

var ProcessFields = []arrow.Field{
	{Name: "ancestry", Type: arrow.ListOf(ProcessEntityStruct), Nullable: true},
	{Name: "auid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "cmd_line", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "container", Type: ContainerStruct, Nullable: true},
	{Name: "cpid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "created_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "egid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "environment_variables", Type: arrow.ListOf(EnvironmentVariableStruct), Nullable: true},
	{Name: "euid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "file", Type: FileStruct, Nullable: true},
	{Name: "group", Type: GroupStruct, Nullable: true},
	{Name: "integrity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "integrity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "loaded_modules", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "namespace_pid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "parent_process", Type: ProcessRefStruct, Nullable: true},
	{Name: "path", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "pid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "sandbox", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "session", Type: SessionStruct, Nullable: true},
	{Name: "terminated_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "tid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "user", Type: UserStruct, Nullable: true},
	{Name: "working_directory", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "xattributes", Type: arrow.BinaryTypes.String, Nullable: true},
}

var ProcessStruct = arrow.StructOf(ProcessFields...)

var ProcessSchema = arrow.NewSchema(ProcessFields, nil)
var ProcessRefFields = []arrow.Field{

	{Name: "auid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "cmd_line", Type: arrow.BinaryTypes.String, Nullable: true},

	{Name: "cpid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "created_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "egid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},

	{Name: "euid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},

	{Name: "integrity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "integrity_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "loaded_modules", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "namespace_pid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},

	{Name: "path", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "pid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "sandbox", Type: arrow.BinaryTypes.String, Nullable: true},

	{Name: "terminated_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "tid", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},

	{Name: "working_directory", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "xattributes", Type: arrow.BinaryTypes.String, Nullable: true},
}
var ProcessRefStruct = arrow.StructOf(ProcessRefFields...)

type ProcessRef struct {
	Auid *int32 `json:"auid,omitempty" parquet:"auid,optional"`

	// Command Line: The full command line used to launch an application, service, process, or job. For example: <code>ssh user@10.0.0.10</code>. If the command line is unavailable or missing, the empty string <code>”</code> is to be used.
	CmdLine *string `json:"cmd_line,omitempty" parquet:"cmd_line,optional"`

	Cpid *string `json:"cpid,omitempty" parquet:"cpid,optional"`

	// Created Time: The time when the process was created/started.
	CreatedTime *int64 `json:"created_time,omitempty" parquet:"created_time,optional"`

	Egid *int32 `json:"egid,omitempty" parquet:"egid,optional"`

	// Environment Variables: Environment variables associated with the process.

	Euid *int32 `json:"euid,omitempty" parquet:"euid,optional"`

	// Integrity: The process integrity level, normalized to the caption of the integrity_id value. In the case of 'Other', it is defined by the event source (Windows only).
	Integrity *string `json:"integrity,omitempty" parquet:"integrity,optional"`

	// Integrity Level: The normalized identifier of the process integrity level (Windows only).
	IntegrityId *int32 `json:"integrity_id,omitempty" parquet:"integrity_id,optional"`

	// Loaded Modules: The list of loaded module names.
	LoadedModules []string `json:"loaded_modules,omitempty" parquet:"loaded_modules,optional,list"`

	// Name: The friendly name of the process, for example: <code>Notepad++</code>.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Namespace PID: If running under a process namespace (such as in a container), the process identifier within that process namespace.
	NamespacePid *int32 `json:"namespace_pid,omitempty" parquet:"namespace_pid,optional"`

	// Path: The process file path.
	Path *string `json:"path,omitempty" parquet:"path,optional"`

	Pid *int32 `json:"pid,omitempty" parquet:"pid,optional"`

	// Sandbox: The name of the containment jail (i.e., sandbox). For example, hardened_ps, high_security_ps, oracle_ps, netsvcs_ps, or default_ps.
	Sandbox *string `json:"sandbox,omitempty" parquet:"sandbox,optional"`

	// Terminated Time: The time when the process was terminated.
	TerminatedTime *int64 `json:"terminated_time,omitempty" parquet:"terminated_time,optional"`

	// Thread ID: The Identifier of the thread associated with the event, as returned by the operating system.
	Tid *int32 `json:"tid,omitempty" parquet:"tid,optional"`

	// Unique ID: A unique identifier for this process assigned by the producer (tool).  Facilitates correlation of a process event with other events for that process.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// Working Directory: The working directory of a process.
	WorkingDirectory *string `json:"working_directory,omitempty" parquet:"working_directory,optional"`

	// Extended Attributes: An unordered collection of zero or more name/value pairs that represent a process extended attribute.
	Xattributes *string `json:"xattributes,omitempty" parquet:"xattributes,optional"`
}
