// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Email struct {

	// Cc: The machine-readable email header Cc values, as defined by RFC 5322. For example <code>example.user@usersdomain.com</code>.
	Cc []string `json:"cc,omitempty" parquet:"cc,optional,list"`

	// Cc Mailboxes: The human-readable email header Cc Mailbox values. For example <code>'Example User &lt;example.user@usersdomain.com&gt;'</code>.
	CcMailboxes []string `json:"cc_mailboxes,omitempty" parquet:"cc_mailboxes,optional,list"`

	// Data Classification: A list of Data Classification objects, that include information about data classification levels and data category types, indentified by a classifier.
	DataClassifications []*DataClassification `json:"data_classifications,omitempty" parquet:"data_classifications,optional,list"`

	// Delivered To: The machine-readable <strong>Delivered-To</strong> email header values. For example <code>example.user@usersdomain.com</code>
	DeliveredToList []string `json:"delivered_to_list,omitempty" parquet:"delivered_to_list,optional,list"`

	// Files: The files embedded or attached to the email.
	Files []*File `json:"files,omitempty" parquet:"files,optional,list"`

	// From: The machine-readable email header From values, as defined by RFC 5322. For example <code>example.user@usersdomain.com</code>
	From *string `json:"from,omitempty" parquet:"from,optional"`

	// From Mailbox: The human-readable email header From Mailbox value. For example <code>'Example User &lt;example.user@usersdomain.com&gt;'</code>.
	FromMailbox *string `json:"from_mailbox,omitempty" parquet:"from_mailbox,optional"`

	// HTTP Headers: Additional HTTP headers of an HTTP request or response.
	HttpHeaders []*HTTPHeader `json:"http_headers,omitempty" parquet:"http_headers,optional,list"`

	// Read: The indication of whether the email has been read.
	IsRead *bool `json:"is_read,omitempty" parquet:"is_read,optional"`

	// Message UID: The email header Message-ID value, as defined by RFC 5322.
	MessageUid *string `json:"message_uid,omitempty" parquet:"message_uid,optional"`

	// Raw Header: The email authentication header.
	RawHeader *string `json:"raw_header,omitempty" parquet:"raw_header,optional"`

	// Reply To Mailboxes: The human-readable email header Reply To Mailbox values. For example <code>'Example User &lt;example.user@usersdomain.com&gt;'</code>.
	ReplyToMailboxes []string `json:"reply_to_mailboxes,omitempty" parquet:"reply_to_mailboxes,optional,list"`

	// Size: The size in bytes of the email, including attachments.
	Size *int64 `json:"size,omitempty" parquet:"size,optional"`

	// Subject: The email header Subject value, as defined by RFC 5322.
	Subject *string `json:"subject,omitempty" parquet:"subject,optional"`

	// To: The machine-readable email header To values, as defined by RFC 5322. For example <code>example.user@usersdomain.com</code>
	To []string `json:"to,omitempty" parquet:"to,optional,list"`

	// To Mailboxes: The human-readable email header To Mailbox values. For example <code>'Example User &lt;example.user@usersdomain.com&gt;'</code>.
	ToMailboxes []string `json:"to_mailboxes,omitempty" parquet:"to_mailboxes,optional,list"`

	// Email Thread UID: The unique identifier of the email thread.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// URLs: The URLs embedded in the email.
	Urls []*UniformResourceLocator `json:"urls,omitempty" parquet:"urls,optional,list"`

	// X-Originating-IP: The X-Originating-IP header identifying the emails originating IP address(es).
	XOriginatingIp []string `json:"x_originating_ip,omitempty" parquet:"x_originating_ip,optional,list"`
}

var EmailFields = []arrow.Field{
	{Name: "cc", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "cc_mailboxes", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "data_classifications", Type: arrow.ListOf(DataClassificationStruct), Nullable: true},
	{Name: "delivered_to_list", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "files", Type: arrow.ListOf(FileStruct), Nullable: true},
	{Name: "from", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "from_mailbox", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "http_headers", Type: arrow.ListOf(HTTPHeaderStruct), Nullable: true},
	{Name: "is_read", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "message_uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "raw_header", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "reply_to_mailboxes", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "size", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "subject", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "to", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "to_mailboxes", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "urls", Type: arrow.ListOf(UniformResourceLocatorStruct), Nullable: true},
	{Name: "x_originating_ip", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
}

var EmailStruct = arrow.StructOf(EmailFields...)

var EmailSchema = arrow.NewSchema(EmailFields, nil)
