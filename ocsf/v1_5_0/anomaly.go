// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Anomaly struct {

	// Observation Parameter: The specific parameter, metric or property where the anomaly was observed. Examples include: CPU usage percentage, API response time in milliseconds, HTTP error rate, memory utilization, network latency, transaction volume, etc. This helps identify the exact aspect of the system exhibiting anomalous behavior.
	ObservationParameter string `json:"observation_parameter" parquet:"observation_parameter"`

	// Observation Type: The type of analysis methodology used to detect the anomaly. This indicates how the anomaly was identified through different analytical approaches. Common types include: Frequency Analysis, Time Pattern Analysis, Volume Analysis, Sequence Analysis, Distribution Analysis, etc.
	ObservationType *string `json:"observation_type,omitempty" parquet:"observation_type,optional"`

	// Observations: Details about the observed anomaly or observations that were flagged as anomalous compared to expected baseline behavior.
	Observations []Observation `json:"observations" parquet:"observations,list"`

	// Observed Pattern: The specific pattern identified within the observation type. For Frequency Analysis, this could be 'FREQUENT', 'INFREQUENT', 'RARE', or 'UNSEEN'. For Time Pattern Analysis, this could be 'BUSINESS_HOURS', 'OFF_HOURS', or 'UNUSUAL_TIME'. For Volume Analysis, this could be 'NORMAL_VOLUME', 'HIGH_VOLUME', or 'SURGE'. The pattern values are specific to each observation type and indicate how the observed behavior relates to the baseline.
	ObservedPattern *string `json:"observed_pattern,omitempty" parquet:"observed_pattern,optional"`
}

func (v *Anomaly) Observable() (*int, string) {
	return nil, ""
}

var AnomalyFields = []arrow.Field{
	{Name: "observation_parameter", Type: arrow.BinaryTypes.String, Nullable: false},
	{Name: "observation_type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "observations", Type: arrow.ListOf(ObservationStruct), Nullable: false},
	{Name: "observed_pattern", Type: arrow.BinaryTypes.String, Nullable: true},
}

var AnomalyStruct = arrow.StructOf(AnomalyFields...)

var AnomalySchema = arrow.NewSchema(AnomalyFields, nil)
var AnomalyClassname = "anomaly"
