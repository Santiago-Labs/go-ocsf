// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type Graph struct {

	// Description: The graph description - provides additional details about the graph's purpose and contents.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Edges: The edges/connections between nodes in the graph - contains the collection of <code>edge</code> objects defining relationships between nodes.
	Edges []*Edge `json:"edges,omitempty" parquet:"edges,optional,list"`

	// Directed: Indicates if the graph is directed (<code>true</code>) or undirected (<code>false</code>).
	IsDirected *bool `json:"is_directed,omitempty" parquet:"is_directed,optional"`

	// Name: The graph name - a human readable identifier for the graph.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Nodes: The nodes/vertices of the graph - contains the collection of <code>node</code> objects that make up the graph.
	Nodes []Node `json:"nodes" parquet:"nodes,list"`

	// Query Language: The graph query language, normalized to the caption of the <code>query_language_id</code> value.
	QueryLanguage *string `json:"query_language,omitempty" parquet:"query_language,optional"`

	// Query Language ID: The normalized identifier of a graph query language that can be used to interact with the graph.
	QueryLanguageId *int32 `json:"query_language_id,omitempty" parquet:"query_language_id,optional"`

	// Type: The graph type. Typically useful to represent the specifc type of graph that is used.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Unique ID: Unique identifier of the graph - a unique ID to reference this specific graph.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`
}

var GraphFields = []arrow.Field{
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "edges", Type: arrow.ListOf(EdgeStruct), Nullable: true},
	{Name: "is_directed", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "nodes", Type: arrow.ListOf(NodeStruct), Nullable: false},
	{Name: "query_language", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "query_language_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
}

var GraphStruct = arrow.StructOf(GraphFields...)

var GraphSchema = arrow.NewSchema(GraphFields, nil)
