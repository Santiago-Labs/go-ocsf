// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type VulnerabilityDetails struct {

	// Security Advisory: Detail about the security advisory, that is used to publicly disclose cybersecurity vulnerabilities by a vendor.
	Advisory *Advisory `json:"advisory,omitempty" parquet:"advisory,optional"`

	// Affected Code: List of Affected Code objects that describe details about code blocks identified as vulnerable.
	AffectedCode []*AffectedCode `json:"affected_code,omitempty" parquet:"affected_code,optional,list"`

	// Affected Software Packages: List of software packages identified as affected by a vulnerability/vulnerabilities.
	AffectedPackages []*AffectedSoftwarePackage `json:"affected_packages,omitempty" parquet:"affected_packages,optional,list"`

	// Category: The category of a vulnerability or weakness, as reported by the source tool, such as <code>Container Security</code> or <code>Open Source Security</code>.
	Category *string `json:"category,omitempty" parquet:"category,optional"`

	// CVE: Describes the Common Vulnerabilities and Exposures <a target='_blank' href='https://cve.mitre.org/'>(CVE)</a> details related to the vulnerability.
	Cve *CVE `json:"cve,omitempty" parquet:"cve,optional"`

	// CWE: Describes the Common Weakness Enumeration <a target='_blank' href='https://cwe.mitre.org/'>(CWE)</a> details related to the vulnerability.
	Cwe *CWE `json:"cwe,omitempty" parquet:"cwe,optional"`

	// Dependency Chain: Information about the chain of dependencies related to the issue as reported by an Application Security or Vulnerability Management tool. E.g., <code>serverless-offline -> @serverless/utils -> memoizee -> es5-ext</code>.
	DependencyChain *string `json:"dependency_chain,omitempty" parquet:"dependency_chain,optional"`

	// Description: The description of the vulnerability.
	Desc *string `json:"desc,omitempty" parquet:"desc,optional"`

	// Exploit Last Seen Time: The time when the exploit was most recently observed.
	ExploitLastSeenTime *int64 `json:"exploit_last_seen_time,omitempty" parquet:"exploit_last_seen_time,optional"`

	// Exploit URL: The URL of the exploit code or Proof-of-Concept (PoC).
	ExploitRefUrl *string `json:"exploit_ref_url,omitempty" parquet:"exploit_ref_url,optional"`

	// Exploit Requirement: The requirement description related to any constraints around exploit execution.
	ExploitRequirement *string `json:"exploit_requirement,omitempty" parquet:"exploit_requirement,optional"`

	// Exploit Type: The categorization or type of Exploit. E.g., <code>Network</code> or <code>Physical</code>.
	ExploitType *string `json:"exploit_type,omitempty" parquet:"exploit_type,optional"`

	// First Seen: The time when the vulnerability was first observed.
	FirstSeenTime *int64 `json:"first_seen_time,omitempty" parquet:"first_seen_time,optional"`

	// Fix Coverage: The fix coverage, normalized to the caption of the <code>fix_coverage_id</code> value.
	FixCoverage *string `json:"fix_coverage,omitempty" parquet:"fix_coverage,optional"`

	// Fix Coverage ID: The normalized identifier for fix coverage, applicable to this vulnerability. Typically useful, when there are multiple affected packages but only a subset have available fixes.
	FixCoverageId *int32 `json:"fix_coverage_id,omitempty" parquet:"fix_coverage_id,optional"`

	// Exploit Availability: Indicates if an exploit or a PoC (proof-of-concept) is available for the reported vulnerability.
	IsExploitAvailable *bool `json:"is_exploit_available,omitempty" parquet:"is_exploit_available,optional"`

	// Fix Availability: Indicates if a fix is available for the reported vulnerability.
	IsFixAvailable *bool `json:"is_fix_available,omitempty" parquet:"is_fix_available,optional"`

	// Last Seen: The time when the vulnerability was most recently observed.
	LastSeenTime *int64 `json:"last_seen_time,omitempty" parquet:"last_seen_time,optional"`

	// References: A list of reference URLs with additional information about the vulnerability.
	References []string `json:"references,omitempty" parquet:"references,optional,list"`

	// Related Vulnerability IDs: List of vulnerability IDs (e.g. CVE ID) that are related to this vulnerability.
	RelatedVulnerabilities []string `json:"related_vulnerabilities,omitempty" parquet:"related_vulnerabilities,optional,list"`

	// Remediation Guidance: The remediation recommendations on how to mitigate the identified vulnerability.
	Remediation *Remediation `json:"remediation,omitempty" parquet:"remediation,optional"`

	// Severity: The vendor assigned severity of the vulnerability.
	Severity *string `json:"severity,omitempty" parquet:"severity,optional"`

	// Title: A title or a brief phrase summarizing the discovered vulnerability.
	Title *string `json:"title,omitempty" parquet:"title,optional"`

	// Vendor Name: The name of the vendor that identified the vulnerability.
	VendorName *string `json:"vendor_name,omitempty" parquet:"vendor_name,optional"`
}

var VulnerabilityDetailsFields = []arrow.Field{
	{Name: "advisory", Type: AdvisoryStruct, Nullable: true},
	{Name: "affected_code", Type: arrow.ListOf(AffectedCodeStruct), Nullable: true},
	{Name: "affected_packages", Type: arrow.ListOf(AffectedSoftwarePackageStruct), Nullable: true},
	{Name: "category", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "cve", Type: CVEStruct, Nullable: true},
	{Name: "cwe", Type: CWEStruct, Nullable: true},
	{Name: "dependency_chain", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "desc", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "exploit_last_seen_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "exploit_ref_url", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "exploit_requirement", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "exploit_type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "first_seen_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "fix_coverage", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "fix_coverage_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "is_exploit_available", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "is_fix_available", Type: arrow.FixedWidthTypes.Boolean, Nullable: true},
	{Name: "last_seen_time", Type: arrow.PrimitiveTypes.Int64, Nullable: true},
	{Name: "references", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "related_vulnerabilities", Type: arrow.ListOf(arrow.BinaryTypes.String), Nullable: true},
	{Name: "remediation", Type: RemediationStruct, Nullable: true},
	{Name: "severity", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "title", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vendor_name", Type: arrow.BinaryTypes.String, Nullable: true},
}

var VulnerabilityDetailsStruct = arrow.StructOf(VulnerabilityDetailsFields...)

var VulnerabilityDetailsSchema = arrow.NewSchema(VulnerabilityDetailsFields, nil)
