// autogenerated by scripts/model_gen.go. DO NOT EDIT
package v1_5_0

import (
	"github.com/apache/arrow-go/v18/arrow"
)

type UnmannedAerialSystem struct {

	// UAS Hardware Information: The endpoint hardware information.
	HwInfo *DeviceHardwareInfo `json:"hw_info,omitempty" parquet:"hw_info,optional"`

	// UAS Position Location Information: The detailed geographical location usually associated with an IP address.
	Location *GeoLocation `json:"location,omitempty" parquet:"location,optional"`

	// Model: The model name of the aircraft or unmanned system.
	Model *string `json:"model,omitempty" parquet:"model,optional"`

	// Name: The name of the unmanned system as reported by tracking or sensing hardware.
	Name *string `json:"name,omitempty" parquet:"name,optional"`

	// Serial Number: The serial number of the unmanned system. This is expressed in <code>CTA-2063-A</code> format.
	SerialNumber *string `json:"serial_number,omitempty" parquet:"serial_number,optional"`

	// Speed: Ground speed of flight. This value is provided in meters per second with a minimum resolution of 0.25 m/s. Special Values: <code>Invalid</code>, <code>No Value</code>, or <code>Unknown: 255 m/s</code>.
	Speed *string `json:"speed,omitempty" parquet:"speed,optional"`

	// Speed Accuracy: Provides quality/containment on horizontal ground speed. Measured in meters/second.
	SpeedAccuracy *string `json:"speed_accuracy,omitempty" parquet:"speed_accuracy,optional"`

	// Track Direction: Direction of flight expressed as a “True North-based” ground track angle. This value is provided in clockwise degrees with a minimum resolution of 1 degree. If aircraft is not moving horizontally, use the “Unknown” value
	TrackDirection *string `json:"track_direction,omitempty" parquet:"track_direction,optional"`

	// Type: The type of the UAS. For example, Helicopter, Gyroplane, Rocket, etc.
	Type *string `json:"type,omitempty" parquet:"type,optional"`

	// Type ID: The UAS type identifier.
	TypeId *int32 `json:"type_id,omitempty" parquet:"type_id,optional"`

	// UAS ID: The primary identification identifier for an unmanned system. This can be a Serial Number (in <code>CTA-2063-A</code> format, the Registration ID (provided by the <code>CAA</code>, a UTM, or a unique Session ID.
	Uid *string `json:"uid,omitempty" parquet:"uid,optional"`

	// UAS Alternate ID: A secondary identification identifier for an unmanned system. This can be a Serial Number (in <code>CTA-2063-A</code> format, the Registration ID (provided by the <code>CAA</code>, a UTM, or a unique Session ID.
	UidAlt *string `json:"uid_alt,omitempty" parquet:"uid_alt,optional"`

	// UTM UUID: The Unmanned Aircraft System Traffic Management (UTM) provided universal unique ID (UUID) traceable to a non-obfuscated ID where this UTM UUID acts as a 'session id' to protect exposure of operationally sensitive information.
	Uuid *string `json:"uuid,omitempty" parquet:"uuid,optional"`

	// Vertical Speed: Vertical speed upward relative to the WGS-84 datum, measured in meters per second. Special Values: <code>Invalid</code>, <code>No Value</code>, or <code>Unknown: 63 m/s</code>.
	VerticalSpeed *string `json:"vertical_speed,omitempty" parquet:"vertical_speed,optional"`
}

var UnmannedAerialSystemFields = []arrow.Field{
	{Name: "hw_info", Type: DeviceHardwareInfoStruct, Nullable: true},
	{Name: "location", Type: GeoLocationStruct, Nullable: true},
	{Name: "model", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "name", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "serial_number", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "speed", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "speed_accuracy", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "track_direction", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "type_id", Type: arrow.PrimitiveTypes.Int32, Nullable: true},
	{Name: "uid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uid_alt", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "uuid", Type: arrow.BinaryTypes.String, Nullable: true},
	{Name: "vertical_speed", Type: arrow.BinaryTypes.String, Nullable: true},
}

var UnmannedAerialSystemStruct = arrow.StructOf(UnmannedAerialSystemFields...)

var UnmannedAerialSystemSchema = arrow.NewSchema(UnmannedAerialSystemFields, nil)
