package ocsf

import (
	"time"

	"github.com/apache/arrow/go/v15/arrow"
	"github.com/apache/arrow/go/v15/arrow/array"
)

// VulnerabilityDetailsFields defines the Arrow fields for VulnerabilityDetails.
var VulnerabilityDetailsFields = []arrow.Field{
	{Name: "uid", Type: arrow.BinaryTypes.String},
	{Name: "cve", Type: arrow.StructOf(CVEFields...)},
	{Name: "cwe", Type: arrow.StructOf(CWEFields...)},
	{Name: "desc", Type: arrow.BinaryTypes.String},
	{Name: "title", Type: arrow.BinaryTypes.String},
	{Name: "severity", Type: arrow.BinaryTypes.String},
	{Name: "is_exploit_available", Type: arrow.FixedWidthTypes.Boolean},
	{Name: "first_seen_time", Type: arrow.BinaryTypes.String},
	{Name: "is_fix_available", Type: arrow.FixedWidthTypes.Boolean},
	{Name: "kb_article_list", Type: arrow.ListOf(arrow.StructOf(KBArticleFields...))},
	{Name: "last_seen_time", Type: arrow.BinaryTypes.String},
	{Name: "references", Type: arrow.ListOf(arrow.BinaryTypes.String)},
	{Name: "related_vulnerabilities", Type: arrow.ListOf(arrow.BinaryTypes.String)},
	{Name: "remediation", Type: arrow.StructOf(RemediationFields...)},
	{Name: "vendor_name", Type: arrow.BinaryTypes.String},
	{Name: "affected_code", Type: arrow.ListOf(arrow.StructOf(AffectedCodeFields...))},
	{Name: "affected_packages", Type: arrow.ListOf(arrow.StructOf(AffectedSoftwarePackageFields...))},
}

// VulnerabilityDetailsSchema is the Arrow schema for VulnerabilityDetails.
var VulnerabilityDetailsSchema = arrow.NewSchema(VulnerabilityDetailsFields, nil)

// VulnerabilityDetails represents detailed vulnerability information.
type VulnerabilityDetails struct {
	UID                    *string                   `json:"uid"`
	CVE                    *CVE                      `json:"cve"`
	CWE                    *CWE                      `json:"cwe"` // e.g. "CWE-79"
	Desc                   *string                   `json:"desc"`
	Title                  *string                   `json:"title"`
	Severity               *string                   `json:"severity"`
	IsExploitAvailable     *bool                     `json:"is_exploit_available"`
	FirstSeenTime          *time.Time                `json:"first_seen_time"` // ISO8601 timestamp
	IsFixAvailable         bool                      `json:"is_fix_available"`
	KbArticleList          []KBArticle               `json:"kb_article_list"`
	LastSeenTime           *time.Time                `json:"last_seen_time"` // ISO8601 timestamp
	References             []string                  `json:"references"`
	RelatedVulnerabilities []string                  `json:"related_vulnerabilities"`
	Remediation            *Remediation              `json:"remediation"`
	VendorName             *string                   `json:"vendor_name"`
	AffectedCode           []AffectedCode            `json:"affected_code,omitempty"`
	AffectedPackages       []AffectedSoftwarePackage `json:"affected_packages,omitempty"`
}

// WriteToParquet writes the VulnerabilityDetails fields to the provided Arrow StructBuilder.
func (vd *VulnerabilityDetails) WriteToParquet(sb *array.StructBuilder) {
	// Field 0: uid.
	uidB := sb.FieldBuilder(0).(*array.StringBuilder)
	if vd.UID != nil {
		uidB.Append(*vd.UID)
	} else {
		uidB.AppendNull()
	}

	// Field 1: cve (nested struct).
	cveB := sb.FieldBuilder(1).(*array.StructBuilder)
	if vd.CVE != nil {
		cveB.Append(true)
		vd.CVE.WriteToParquet(cveB)
	} else {
		cveB.AppendNull()
	}

	// Field 2: cwe (nested struct).
	cweB := sb.FieldBuilder(2).(*array.StructBuilder)
	if vd.CWE != nil {
		cweB.Append(true)
		vd.CWE.WriteToParquet(cweB)
	} else {
		cweB.AppendNull()
	}

	// Field 3: desc.
	descB := sb.FieldBuilder(3).(*array.StringBuilder)
	if vd.Desc != nil {
		descB.Append(*vd.Desc)
	} else {
		descB.AppendNull()
	}

	// Field 4: title.
	titleB := sb.FieldBuilder(4).(*array.StringBuilder)
	if vd.Title != nil {
		titleB.Append(*vd.Title)
	} else {
		titleB.AppendNull()
	}

	// Field 5: severity.
	severityB := sb.FieldBuilder(5).(*array.StringBuilder)
	if vd.Severity != nil {
		severityB.Append(*vd.Severity)
	} else {
		severityB.AppendNull()
	}

	// Field 6: is_exploit_available.
	isExploitB := sb.FieldBuilder(6).(*array.BooleanBuilder)
	if vd.IsExploitAvailable != nil {
		isExploitB.Append(*vd.IsExploitAvailable)
	} else {
		isExploitB.AppendNull()
	}

	// Field 7: first_seen_time.
	firstSeenB := sb.FieldBuilder(7).(*array.StringBuilder)
	if vd.FirstSeenTime != nil {
		firstSeenB.Append(vd.FirstSeenTime.Format(time.RFC3339))
	} else {
		firstSeenB.AppendNull()
	}

	// Field 8: is_fix_available.
	isFixB := sb.FieldBuilder(8).(*array.BooleanBuilder)
	isFixB.Append(vd.IsFixAvailable)

	// Field 9: kb_article_list (list of KBArticle structs).
	kbListB := sb.FieldBuilder(9).(*array.ListBuilder)
	if len(vd.KbArticleList) > 0 {
		kbListB.Append(true)
		kbValB := kbListB.ValueBuilder().(*array.StructBuilder)
		for _, kb := range vd.KbArticleList {
			kbValB.Append(true)
			kb.WriteToParquet(kbValB)
		}
	} else {
		kbListB.AppendNull()
	}

	// Field 10: last_seen_time.
	lastSeenB := sb.FieldBuilder(10).(*array.StringBuilder)
	if vd.LastSeenTime != nil {
		lastSeenB.Append(vd.LastSeenTime.Format(time.RFC3339))
	} else {
		lastSeenB.AppendNull()
	}

	// Field 11: references (list of strings).
	refsB := sb.FieldBuilder(11).(*array.ListBuilder)
	if len(vd.References) > 0 {
		refsB.Append(true)
		refsValB := refsB.ValueBuilder().(*array.StringBuilder)
		for _, ref := range vd.References {
			refsValB.Append(ref)
		}
	} else {
		refsB.AppendNull()
	}

	// Field 12: related_vulnerabilities (list of strings).
	relVulnsB := sb.FieldBuilder(12).(*array.ListBuilder)
	if len(vd.RelatedVulnerabilities) > 0 {
		relVulnsB.Append(true)
		relVulnsValB := relVulnsB.ValueBuilder().(*array.StringBuilder)
		for _, rv := range vd.RelatedVulnerabilities {
			relVulnsValB.Append(rv)
		}
	} else {
		relVulnsB.AppendNull()
	}

	// Field 13: remediation (nested struct).
	remB := sb.FieldBuilder(13).(*array.StructBuilder)
	if vd.Remediation != nil {
		remB.Append(true)
		vd.Remediation.WriteToParquet(remB)
	} else {
		remB.AppendNull()
	}

	// Field 14: vendor_name.
	vendorB := sb.FieldBuilder(14).(*array.StringBuilder)
	if vd.VendorName != nil {
		vendorB.Append(*vd.VendorName)
	} else {
		vendorB.AppendNull()
	}

	// Field 15: affected_code (list of AffectedCode structs).
	affectedCodeB := sb.FieldBuilder(15).(*array.ListBuilder)
	if len(vd.AffectedCode) > 0 {
		affectedCodeB.Append(true)
		affectedCodeValB := affectedCodeB.ValueBuilder().(*array.StructBuilder)
		for _, ac := range vd.AffectedCode {
			affectedCodeValB.Append(true)
			ac.WriteToParquet(affectedCodeValB)
		}
	} else {
		affectedCodeB.AppendNull()
	}

	// Field 16: affected_packages (list of AffectedSoftwarePackage structs).
	affectedPackagesB := sb.FieldBuilder(16).(*array.ListBuilder)
	if len(vd.AffectedPackages) > 0 {
		affectedPackagesB.Append(true)
		affectedPackagesValB := affectedPackagesB.ValueBuilder().(*array.StructBuilder)
		for _, ap := range vd.AffectedPackages {
			affectedPackagesValB.Append(true)
			ap.WriteToParquet(affectedPackagesValB)
		}
	} else {
		affectedPackagesB.AppendNull()
	}
}
